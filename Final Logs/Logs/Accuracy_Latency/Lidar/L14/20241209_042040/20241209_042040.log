2024/12/09 04:20:42 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Jul 29 2024, 17:02:10) [GCC 9.4.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 2105042298
    GPU 0: Xavier
    CUDA_HOME: /usr/local/cuda-11.4
    NVCC: Cuda compilation tools, release 11.4, V11.4.315
    GCC: aarch64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
    PyTorch: 1.11.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.4
  - C++ Version: 201402
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: NO AVX
  - CUDA Runtime 11.4
  - NVCC architecture flags: -gencode;arch=compute_72,code=sm_72;-gencode;arch=compute_87,code=sm_87
  - CuDNN 8.6
    - Built with CuDNN 8.3.2
  - Build settings: BLAS_INFO=open, BUILD_TYPE=Release, CUDA_VERSION=11.4, CUDNN_VERSION=8.3.2, CXX_COMPILER=/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, FORCE_FALLBACK_CUDA_MPI=1, LAPACK_INFO=open, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EIGEN_FOR_BLAS=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=OFF, USE_MKLDNN=OFF, USE_MPI=ON, USE_NCCL=0, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2105042298
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/12/09 04:20:45 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=32, enable=False)
backend_args = None
class_names = [
    'car',
    'truck',
    'construction_vehicle',
    'bus',
    'trailer',
    'barrier',
    'motorcycle',
    'bicycle',
    'pedestrian',
    'traffic_cone',
]
custom_hooks = [
    dict(disable_after_epoch=15, type='DisableObjectSampleHook'),
]
custom_imports = dict(
    allow_failed_imports=False, imports=[
        'projects.BEVFusion.bevfusion',
    ])
data_prefix = dict(
    CAM_BACK='samples/CAM_BACK',
    CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
    CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
    CAM_FRONT='samples/CAM_FRONT',
    CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
    CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
    pts='samples/LIDAR_TOP',
    sweeps='sweeps/LIDAR_TOP')
data_root = '/media/xavier02/Sparkles1/nuscenes/'
dataset_type = 'NuScenesDataset'
db_sampler = dict(
    classes=[
        'car',
        'truck',
        'construction_vehicle',
        'bus',
        'trailer',
        'barrier',
        'motorcycle',
        'bicycle',
        'pedestrian',
        'traffic_cone',
    ],
    data_root='/media/xavier02/Sparkles1/nuscenes/',
    info_path='/media/xavier02/Sparkles1/nuscenes/nuscenes_dbinfos_train.pkl',
    points_loader=dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='LoadPointsFromFile',
        use_dim=[
            0,
            1,
            2,
            3,
            4,
        ]),
    prepare=dict(
        filter_by_difficulty=[
            -1,
        ],
        filter_by_min_points=dict(
            barrier=5,
            bicycle=5,
            bus=5,
            car=5,
            construction_vehicle=5,
            motorcycle=5,
            pedestrian=5,
            traffic_cone=5,
            trailer=5,
            truck=5)),
    rate=1.0,
    sample_groups=dict(
        barrier=2,
        bicycle=6,
        bus=4,
        car=2,
        construction_vehicle=7,
        motorcycle=6,
        pedestrian=2,
        traffic_cone=2,
        trailer=6,
        truck=3))
default_hooks = dict(
    checkpoint=dict(interval=5, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='Det3DVisualizationHook'))
default_scope = 'mmdet3d'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
input_modality = dict(use_camera=False, use_lidar=True)
launcher = 'none'
load_from = 'projects/BEVFusion/configs/MMCV_Lidar_own.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
lr = 0.0001
metainfo = dict(classes=[
    'car',
    'truck',
    'construction_vehicle',
    'bus',
    'trailer',
    'barrier',
    'motorcycle',
    'bicycle',
    'pedestrian',
    'traffic_cone',
])
model = dict(
    bbox_head=dict(
        auxiliary=True,
        bbox_coder=dict(
            code_size=10,
            out_size_factor=8,
            pc_range=[
                -54.0,
                -54.0,
            ],
            post_center_range=[
                -61.2,
                -61.2,
                -10.0,
                61.2,
                61.2,
                10.0,
            ],
            score_threshold=0.0,
            type='TransFusionBBoxCoder',
            voxel_size=[
                0.075,
                0.075,
            ]),
        bn_momentum=0.1,
        common_heads=dict(
            center=[
                2,
                2,
            ],
            dim=[
                3,
                2,
            ],
            height=[
                1,
                2,
            ],
            rot=[
                2,
                2,
            ],
            vel=[
                2,
                2,
            ]),
        decoder_layer=dict(
            cross_attn_cfg=dict(dropout=0.1, embed_dims=128, num_heads=8),
            ffn_cfg=dict(
                act_cfg=dict(inplace=True, type='ReLU'),
                embed_dims=128,
                feedforward_channels=256,
                ffn_drop=0.1,
                num_fcs=2),
            norm_cfg=dict(type='LN'),
            pos_encoding_cfg=dict(input_channel=2, num_pos_feats=128),
            self_attn_cfg=dict(dropout=0.1, embed_dims=128, num_heads=8),
            type='TransformerDecoderLayer'),
        hidden_channel=128,
        in_channels=512,
        loss_bbox=dict(
            loss_weight=0.25, reduction='mean', type='mmdet.L1Loss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            reduction='mean',
            type='mmdet.FocalLoss',
            use_sigmoid=True),
        loss_heatmap=dict(
            loss_weight=1.0, reduction='mean', type='mmdet.GaussianFocalLoss'),
        nms_kernel_size=3,
        num_classes=10,
        num_decoder_layers=1,
        num_proposals=200,
        test_cfg=dict(
            dataset='nuScenes',
            grid_size=[
                1440,
                1440,
                41,
            ],
            nms_type=None,
            out_size_factor=8,
            pc_range=[
                -54.0,
                -54.0,
            ],
            voxel_size=[
                0.075,
                0.075,
            ]),
        train_cfg=dict(
            assigner=dict(
                cls_cost=dict(
                    alpha=0.25,
                    gamma=2.0,
                    type='mmdet.FocalLossCost',
                    weight=0.15),
                iou_calculator=dict(coordinate='lidar', type='BboxOverlaps3D'),
                iou_cost=dict(type='IoU3DCost', weight=0.25),
                reg_cost=dict(type='BBoxBEVL1Cost', weight=0.25),
                type='HungarianAssigner3D'),
            code_weights=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.2,
                0.2,
            ],
            dataset='nuScenes',
            gaussian_overlap=0.1,
            grid_size=[
                1440,
                1440,
                41,
            ],
            min_radius=2,
            out_size_factor=8,
            point_cloud_range=[
                -54.0,
                -54.0,
                -5.0,
                54.0,
                54.0,
                3.0,
            ],
            pos_weight=-1,
            voxel_size=[
                0.075,
                0.075,
                0.2,
            ]),
        type='TransFusionHead'),
    data_preprocessor=dict(
        pad_size_divisor=32,
        type='Det3DDataPreprocessor',
        voxelize_cfg=dict(
            max_num_points=10,
            max_voxels=[
                120000,
                160000,
            ],
            point_cloud_range=[
                -54.0,
                -54.0,
                -5.0,
                54.0,
                54.0,
                3.0,
            ],
            voxel_size=[
                0.075,
                0.075,
                0.2,
            ],
            voxelize_reduce=True)),
    pts_backbone=dict(
        conv_cfg=dict(bias=False, type='Conv2d'),
        in_channels=256,
        layer_nums=[
            5,
            5,
        ],
        layer_strides=[
            1,
            2,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.01, type='BN'),
        out_channels=[
            128,
            256,
        ],
        type='SECOND'),
    pts_middle_encoder=dict(
        block_type='basicblock',
        encoder_channels=(
            (
                16,
                16,
                32,
            ),
            (
                32,
                32,
                64,
            ),
            (
                64,
                64,
                128,
            ),
            (
                128,
                128,
            ),
        ),
        encoder_paddings=(
            (
                0,
                0,
                1,
            ),
            (
                0,
                0,
                1,
            ),
            (
                0,
                0,
                (
                    1,
                    1,
                    0,
                ),
            ),
            (
                0,
                0,
            ),
        ),
        in_channels=5,
        norm_cfg=dict(eps=0.001, momentum=0.01, type='BN1d'),
        order=(
            'conv',
            'norm',
            'act',
        ),
        sparse_shape=[
            1440,
            1440,
            41,
        ],
        type='BEVFusionSparseEncoder'),
    pts_neck=dict(
        in_channels=[
            128,
            256,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.01, type='BN'),
        out_channels=[
            256,
            256,
        ],
        type='SECONDFPN',
        upsample_cfg=dict(bias=False, type='deconv'),
        upsample_strides=[
            1,
            2,
        ],
        use_conv_for_no_stride=True),
    pts_voxel_encoder=dict(num_features=5, type='HardSimpleVFE'),
    type='BEVFusion')
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.0001, type='AdamW', weight_decay=0.01),
    type='OptimWrapper')
param_scheduler = [
    dict(
        T_max=8,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=8,
        eta_min=0.001,
        type='CosineAnnealingLR'),
    dict(
        T_max=12,
        begin=8,
        by_epoch=True,
        convert_to_iter_based=True,
        end=20,
        eta_min=1e-08,
        type='CosineAnnealingLR'),
    dict(
        T_max=8,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=8,
        eta_min=0.8947368421052632,
        type='CosineAnnealingMomentum'),
    dict(
        T_max=12,
        begin=8,
        by_epoch=True,
        convert_to_iter_based=True,
        end=20,
        eta_min=1,
        type='CosineAnnealingMomentum'),
]
point_cloud_range = [
    -54.0,
    -54.0,
    -5.0,
    54.0,
    54.0,
    3.0,
]
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='nuscenes_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            pts='samples/LIDAR_TOP',
            sweeps='sweeps/LIDAR_TOP'),
        data_root='/media/xavier02/Sparkles1/nuscenes/',
        metainfo=dict(classes=[
            'car',
            'truck',
            'construction_vehicle',
            'bus',
            'trailer',
            'barrier',
            'motorcycle',
            'bicycle',
            'pedestrian',
            'traffic_cone',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=5,
                type='LoadPointsFromFile',
                use_dim=5),
            dict(
                backend_args=None,
                load_dim=5,
                pad_empty_sweeps=True,
                remove_close=True,
                sweeps_num=9,
                type='LoadPointsFromMultiSweeps',
                use_dim=5),
            dict(type='PointShuffle'),
            dict(num_points=175000, type='PointSample'),
            dict(
                point_cloud_range=[
                    -54.0,
                    -54.0,
                    -5.0,
                    54.0,
                    54.0,
                    3.0,
                ],
                type='PointsRangeFilter'),
            dict(
                keys=[
                    'img',
                    'points',
                    'gt_bboxes_3d',
                    'gt_labels_3d',
                ],
                meta_keys=[
                    'cam2img',
                    'ori_cam2img',
                    'lidar2cam',
                    'lidar2img',
                    'cam2lidar',
                    'ori_lidar2img',
                    'img_aug_matrix',
                    'box_type_3d',
                    'sample_idx',
                    'lidar_path',
                    'img_path',
                    'num_pts_feats',
                    'num_views',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='NuScenesDataset'),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='/media/xavier02/Sparkles1/nuscenes/nuscenes_infos_val.pkl',
    backend_args=None,
    data_root='/media/xavier02/Sparkles1/nuscenes/',
    metric='bbox',
    type='NuScenesMetric')
test_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='LoadPointsFromFile',
        use_dim=5),
    dict(
        backend_args=None,
        load_dim=5,
        pad_empty_sweeps=True,
        remove_close=True,
        sweeps_num=9,
        type='LoadPointsFromMultiSweeps',
        use_dim=5),
    dict(type='PointShuffle'),
    dict(num_points=175000, type='PointSample'),
    dict(
        point_cloud_range=[
            -54.0,
            -54.0,
            -5.0,
            54.0,
            54.0,
            3.0,
        ],
        type='PointsRangeFilter'),
    dict(
        keys=[
            'img',
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
        ],
        meta_keys=[
            'cam2img',
            'ori_cam2img',
            'lidar2cam',
            'lidar2img',
            'cam2lidar',
            'ori_lidar2img',
            'img_aug_matrix',
            'box_type_3d',
            'sample_idx',
            'lidar_path',
            'img_path',
            'num_pts_feats',
            'num_views',
        ],
        type='Pack3DDetInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=20, val_interval=5)
train_dataloader = dict(
    batch_size=1,
    dataset=dict(
        dataset=dict(
            ann_file='nuscenes_infos_train.pkl',
            box_type_3d='LiDAR',
            data_prefix=dict(
                CAM_BACK='samples/CAM_BACK',
                CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
                CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
                CAM_FRONT='samples/CAM_FRONT',
                CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
                CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
                pts='samples/LIDAR_TOP',
                sweeps='sweeps/LIDAR_TOP'),
            data_root='/media/xavier02/Sparkles1/nuscenes/',
            metainfo=dict(classes=[
                'car',
                'truck',
                'construction_vehicle',
                'bus',
                'trailer',
                'barrier',
                'motorcycle',
                'bicycle',
                'pedestrian',
                'traffic_cone',
            ]),
            modality=dict(use_camera=False, use_lidar=True),
            pipeline=[
                dict(
                    backend_args=None,
                    coord_type='LIDAR',
                    load_dim=5,
                    type='LoadPointsFromFile',
                    use_dim=5),
                dict(
                    backend_args=None,
                    load_dim=5,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    sweeps_num=9,
                    type='LoadPointsFromMultiSweeps',
                    use_dim=5),
                dict(
                    type='LoadAnnotations3D',
                    with_attr_label=False,
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    db_sampler=dict(
                        classes=[
                            'car',
                            'truck',
                            'construction_vehicle',
                            'bus',
                            'trailer',
                            'barrier',
                            'motorcycle',
                            'bicycle',
                            'pedestrian',
                            'traffic_cone',
                        ],
                        data_root='/media/xavier02/Sparkles1/nuscenes/',
                        info_path=
                        '/media/xavier02/Sparkles1/nuscenes/nuscenes_dbinfos_train.pkl',
                        points_loader=dict(
                            backend_args=None,
                            coord_type='LIDAR',
                            load_dim=5,
                            type='LoadPointsFromFile',
                            use_dim=[
                                0,
                                1,
                                2,
                                3,
                                4,
                            ]),
                        prepare=dict(
                            filter_by_difficulty=[
                                -1,
                            ],
                            filter_by_min_points=dict(
                                barrier=5,
                                bicycle=5,
                                bus=5,
                                car=5,
                                construction_vehicle=5,
                                motorcycle=5,
                                pedestrian=5,
                                traffic_cone=5,
                                trailer=5,
                                truck=5)),
                        rate=1.0,
                        sample_groups=dict(
                            barrier=2,
                            bicycle=6,
                            bus=4,
                            car=2,
                            construction_vehicle=7,
                            motorcycle=6,
                            pedestrian=2,
                            traffic_cone=2,
                            trailer=6,
                            truck=3)),
                    type='ObjectSample'),
                dict(
                    rot_range=[
                        -0.78539816,
                        0.78539816,
                    ],
                    scale_ratio_range=[
                        0.9,
                        1.1,
                    ],
                    translation_std=0.5,
                    type='GlobalRotScaleTrans'),
                dict(type='BEVFusionRandomFlip3D'),
                dict(
                    point_cloud_range=[
                        -54.0,
                        -54.0,
                        -5.0,
                        54.0,
                        54.0,
                        3.0,
                    ],
                    type='PointsRangeFilter'),
                dict(
                    point_cloud_range=[
                        -54.0,
                        -54.0,
                        -5.0,
                        54.0,
                        54.0,
                        3.0,
                    ],
                    type='ObjectRangeFilter'),
                dict(
                    classes=[
                        'car',
                        'truck',
                        'construction_vehicle',
                        'bus',
                        'trailer',
                        'barrier',
                        'motorcycle',
                        'bicycle',
                        'pedestrian',
                        'traffic_cone',
                    ],
                    type='ObjectNameFilter'),
                dict(type='PointShuffle'),
                dict(
                    keys=[
                        'points',
                        'img',
                        'gt_bboxes_3d',
                        'gt_labels_3d',
                        'gt_bboxes',
                        'gt_labels',
                    ],
                    meta_keys=[
                        'cam2img',
                        'ori_cam2img',
                        'lidar2cam',
                        'lidar2img',
                        'cam2lidar',
                        'ori_lidar2img',
                        'img_aug_matrix',
                        'box_type_3d',
                        'sample_idx',
                        'lidar_path',
                        'img_path',
                        'transformation_3d_flow',
                        'pcd_rotation',
                        'pcd_scale_factor',
                        'pcd_trans',
                        'img_aug_matrix',
                        'lidar_aug_matrix',
                    ],
                    type='Pack3DDetInputs'),
            ],
            test_mode=False,
            type='NuScenesDataset',
            use_valid_flag=True),
        type='CBGSDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='LoadPointsFromFile',
        use_dim=5),
    dict(
        backend_args=None,
        load_dim=5,
        pad_empty_sweeps=True,
        remove_close=True,
        sweeps_num=9,
        type='LoadPointsFromMultiSweeps',
        use_dim=5),
    dict(
        type='LoadAnnotations3D',
        with_attr_label=False,
        with_bbox_3d=True,
        with_label_3d=True),
    dict(
        db_sampler=dict(
            classes=[
                'car',
                'truck',
                'construction_vehicle',
                'bus',
                'trailer',
                'barrier',
                'motorcycle',
                'bicycle',
                'pedestrian',
                'traffic_cone',
            ],
            data_root='/media/xavier02/Sparkles1/nuscenes/',
            info_path=
            '/media/xavier02/Sparkles1/nuscenes/nuscenes_dbinfos_train.pkl',
            points_loader=dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=5,
                type='LoadPointsFromFile',
                use_dim=[
                    0,
                    1,
                    2,
                    3,
                    4,
                ]),
            prepare=dict(
                filter_by_difficulty=[
                    -1,
                ],
                filter_by_min_points=dict(
                    barrier=5,
                    bicycle=5,
                    bus=5,
                    car=5,
                    construction_vehicle=5,
                    motorcycle=5,
                    pedestrian=5,
                    traffic_cone=5,
                    trailer=5,
                    truck=5)),
            rate=1.0,
            sample_groups=dict(
                barrier=2,
                bicycle=6,
                bus=4,
                car=2,
                construction_vehicle=7,
                motorcycle=6,
                pedestrian=2,
                traffic_cone=2,
                trailer=6,
                truck=3)),
        type='ObjectSample'),
    dict(
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        scale_ratio_range=[
            0.9,
            1.1,
        ],
        translation_std=0.5,
        type='GlobalRotScaleTrans'),
    dict(type='BEVFusionRandomFlip3D'),
    dict(
        point_cloud_range=[
            -54.0,
            -54.0,
            -5.0,
            54.0,
            54.0,
            3.0,
        ],
        type='PointsRangeFilter'),
    dict(
        point_cloud_range=[
            -54.0,
            -54.0,
            -5.0,
            54.0,
            54.0,
            3.0,
        ],
        type='ObjectRangeFilter'),
    dict(
        classes=[
            'car',
            'truck',
            'construction_vehicle',
            'bus',
            'trailer',
            'barrier',
            'motorcycle',
            'bicycle',
            'pedestrian',
            'traffic_cone',
        ],
        type='ObjectNameFilter'),
    dict(type='PointShuffle'),
    dict(
        keys=[
            'points',
            'img',
            'gt_bboxes_3d',
            'gt_labels_3d',
            'gt_bboxes',
            'gt_labels',
        ],
        meta_keys=[
            'cam2img',
            'ori_cam2img',
            'lidar2cam',
            'lidar2img',
            'cam2lidar',
            'ori_lidar2img',
            'img_aug_matrix',
            'box_type_3d',
            'sample_idx',
            'lidar_path',
            'img_path',
            'transformation_3d_flow',
            'pcd_rotation',
            'pcd_scale_factor',
            'pcd_trans',
            'img_aug_matrix',
            'lidar_aug_matrix',
        ],
        type='Pack3DDetInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='nuscenes_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            pts='samples/LIDAR_TOP',
            sweeps='sweeps/LIDAR_TOP'),
        data_root='/media/xavier02/Sparkles1/nuscenes/',
        metainfo=dict(classes=[
            'car',
            'truck',
            'construction_vehicle',
            'bus',
            'trailer',
            'barrier',
            'motorcycle',
            'bicycle',
            'pedestrian',
            'traffic_cone',
        ]),
        modality=dict(use_camera=False, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=5,
                type='LoadPointsFromFile',
                use_dim=5),
            dict(
                backend_args=None,
                load_dim=5,
                pad_empty_sweeps=True,
                remove_close=True,
                sweeps_num=9,
                type='LoadPointsFromMultiSweeps',
                use_dim=5),
            dict(type='PointShuffle'),
            dict(num_points=175000, type='PointSample'),
            dict(
                point_cloud_range=[
                    -54.0,
                    -54.0,
                    -5.0,
                    54.0,
                    54.0,
                    3.0,
                ],
                type='PointsRangeFilter'),
            dict(
                keys=[
                    'img',
                    'points',
                    'gt_bboxes_3d',
                    'gt_labels_3d',
                ],
                meta_keys=[
                    'cam2img',
                    'ori_cam2img',
                    'lidar2cam',
                    'lidar2img',
                    'cam2lidar',
                    'ori_lidar2img',
                    'img_aug_matrix',
                    'box_type_3d',
                    'sample_idx',
                    'lidar_path',
                    'img_path',
                    'num_pts_feats',
                    'num_views',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='NuScenesDataset'),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='/media/xavier02/Sparkles1/nuscenes/nuscenes_infos_val.pkl',
    backend_args=None,
    data_root='/media/xavier02/Sparkles1/nuscenes/',
    metric='bbox',
    type='NuScenesMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='Det3DLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
voxel_size = [
    0.075,
    0.075,
    0.2,
]
work_dir = './work_dirs/bevfusion_lidar_voxel0075_175k'

2024/12/09 04:20:53 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/12/09 04:20:53 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DisableObjectSampleHook            
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/12/09 04:21:30 - mmengine - INFO - ------------------------------
2024/12/09 04:21:30 - mmengine - INFO - The length of test dataset: 6019
2024/12/09 04:21:30 - mmengine - INFO - The number of instances per category in the dataset:
+----------------------+--------+
| category             | number |
+----------------------+--------+
| car                  | 80004  |
| truck                | 15704  |
| construction_vehicle | 2678   |
| bus                  | 3158   |
| trailer              | 4159   |
| barrier              | 26992  |
| motorcycle           | 2508   |
| bicycle              | 2381   |
| pedestrian           | 34347  |
| traffic_cone         | 15597  |
+----------------------+--------+
2024/12/09 04:21:35 - mmengine - INFO - Load checkpoint from projects/BEVFusion/configs/MMCV_Lidar_own.pth
2024/12/09 04:22:06 - mmengine - INFO - Epoch(test) [  50/6019]    eta: 1:01:15  time: 0.6158  data_time: 0.0178  memory: 431  
2024/12/09 04:22:36 - mmengine - INFO - Epoch(test) [ 100/6019]    eta: 0:59:45  time: 0.5957  data_time: 0.0077  memory: 432  
2024/12/09 04:23:04 - mmengine - INFO - Epoch(test) [ 150/6019]    eta: 0:58:06  time: 0.5707  data_time: 0.0070  memory: 432  
2024/12/09 04:23:33 - mmengine - INFO - Epoch(test) [ 200/6019]    eta: 0:57:17  time: 0.5807  data_time: 0.0071  memory: 431  
2024/12/09 04:24:01 - mmengine - INFO - Epoch(test) [ 250/6019]    eta: 0:56:11  time: 0.5589  data_time: 0.0070  memory: 431  
2024/12/09 04:24:28 - mmengine - INFO - Epoch(test) [ 300/6019]    eta: 0:55:01  time: 0.5417  data_time: 0.0080  memory: 432  
2024/12/09 04:24:56 - mmengine - INFO - Epoch(test) [ 350/6019]    eta: 0:54:17  time: 0.5590  data_time: 0.0072  memory: 431  
2024/12/09 04:25:25 - mmengine - INFO - Epoch(test) [ 400/6019]    eta: 0:53:46  time: 0.5714  data_time: 0.0072  memory: 432  
2024/12/09 04:25:53 - mmengine - INFO - Epoch(test) [ 450/6019]    eta: 0:53:10  time: 0.5626  data_time: 0.0070  memory: 431  
2024/12/09 04:26:21 - mmengine - INFO - Epoch(test) [ 500/6019]    eta: 0:52:30  time: 0.5518  data_time: 0.0070  memory: 431  
2024/12/09 04:26:49 - mmengine - INFO - Epoch(test) [ 550/6019]    eta: 0:52:04  time: 0.5751  data_time: 0.0074  memory: 433  
2024/12/09 04:27:18 - mmengine - INFO - Epoch(test) [ 600/6019]    eta: 0:51:33  time: 0.5660  data_time: 0.0070  memory: 431  
2024/12/09 04:27:42 - mmengine - INFO - Epoch(test) [ 650/6019]    eta: 0:50:31  time: 0.4917  data_time: 0.0069  memory: 430  
2024/12/09 04:28:08 - mmengine - INFO - Epoch(test) [ 700/6019]    eta: 0:49:45  time: 0.5179  data_time: 0.0072  memory: 431  
2024/12/09 04:28:35 - mmengine - INFO - Epoch(test) [ 750/6019]    eta: 0:49:12  time: 0.5464  data_time: 0.0069  memory: 430  
2024/12/09 04:29:02 - mmengine - INFO - Epoch(test) [ 800/6019]    eta: 0:48:35  time: 0.5334  data_time: 0.0073  memory: 431  
2024/12/09 04:29:27 - mmengine - INFO - Epoch(test) [ 850/6019]    eta: 0:47:46  time: 0.4880  data_time: 0.0069  memory: 430  
2024/12/09 04:29:54 - mmengine - INFO - Epoch(test) [ 900/6019]    eta: 0:47:15  time: 0.5429  data_time: 0.0071  memory: 430  
2024/12/09 04:30:21 - mmengine - INFO - Epoch(test) [ 950/6019]    eta: 0:46:47  time: 0.5528  data_time: 0.0070  memory: 430  
2024/12/09 04:30:49 - mmengine - INFO - Epoch(test) [1000/6019]    eta: 0:46:18  time: 0.5514  data_time: 0.0071  memory: 430  
2024/12/09 04:31:17 - mmengine - INFO - Epoch(test) [1050/6019]    eta: 0:45:51  time: 0.5566  data_time: 0.0082  memory: 430  
2024/12/09 04:31:45 - mmengine - INFO - Epoch(test) [1100/6019]    eta: 0:45:24  time: 0.5546  data_time: 0.0070  memory: 431  
2024/12/09 04:32:12 - mmengine - INFO - Epoch(test) [1150/6019]    eta: 0:44:55  time: 0.5495  data_time: 0.0071  memory: 431  
2024/12/09 04:32:40 - mmengine - INFO - Epoch(test) [1200/6019]    eta: 0:44:31  time: 0.5691  data_time: 0.0072  memory: 431  
2024/12/09 04:33:09 - mmengine - INFO - Epoch(test) [1250/6019]    eta: 0:44:07  time: 0.5730  data_time: 0.0071  memory: 431  
2024/12/09 04:33:36 - mmengine - INFO - Epoch(test) [1300/6019]    eta: 0:43:37  time: 0.5446  data_time: 0.0071  memory: 431  
2024/12/09 04:34:05 - mmengine - INFO - Epoch(test) [1350/6019]    eta: 0:43:11  time: 0.5641  data_time: 0.0073  memory: 431  
2024/12/09 04:34:31 - mmengine - INFO - Epoch(test) [1400/6019]    eta: 0:42:40  time: 0.5350  data_time: 0.0071  memory: 431  
2024/12/09 04:34:59 - mmengine - INFO - Epoch(test) [1450/6019]    eta: 0:42:11  time: 0.5449  data_time: 0.0068  memory: 431  
2024/12/09 04:35:28 - mmengine - INFO - Epoch(test) [1500/6019]    eta: 0:41:48  time: 0.5890  data_time: 0.0074  memory: 431  
2024/12/09 04:35:56 - mmengine - INFO - Epoch(test) [1550/6019]    eta: 0:41:21  time: 0.5613  data_time: 0.0078  memory: 431  
2024/12/09 04:36:22 - mmengine - INFO - Epoch(test) [1600/6019]    eta: 0:40:50  time: 0.5270  data_time: 0.0075  memory: 431  
2024/12/09 04:36:50 - mmengine - INFO - Epoch(test) [1650/6019]    eta: 0:40:22  time: 0.5539  data_time: 0.0074  memory: 432  
2024/12/09 04:37:17 - mmengine - INFO - Epoch(test) [1700/6019]    eta: 0:39:51  time: 0.5335  data_time: 0.0068  memory: 431  
2024/12/09 04:37:45 - mmengine - INFO - Epoch(test) [1750/6019]    eta: 0:39:24  time: 0.5572  data_time: 0.0078  memory: 431  
2024/12/09 04:38:11 - mmengine - INFO - Epoch(test) [1800/6019]    eta: 0:38:53  time: 0.5265  data_time: 0.0069  memory: 430  
2024/12/09 04:38:39 - mmengine - INFO - Epoch(test) [1850/6019]    eta: 0:38:26  time: 0.5610  data_time: 0.0073  memory: 431  
2024/12/09 04:39:04 - mmengine - INFO - Epoch(test) [1900/6019]    eta: 0:37:53  time: 0.5009  data_time: 0.0071  memory: 431  
2024/12/09 04:39:30 - mmengine - INFO - Epoch(test) [1950/6019]    eta: 0:37:23  time: 0.5263  data_time: 0.0078  memory: 431  
2024/12/09 04:39:58 - mmengine - INFO - Epoch(test) [2000/6019]    eta: 0:36:55  time: 0.5435  data_time: 0.0070  memory: 431  
2024/12/09 04:40:26 - mmengine - INFO - Epoch(test) [2050/6019]    eta: 0:36:28  time: 0.5570  data_time: 0.0074  memory: 431  
2024/12/09 04:40:55 - mmengine - INFO - Epoch(test) [2100/6019]    eta: 0:36:03  time: 0.5852  data_time: 0.0074  memory: 431  
2024/12/09 04:41:23 - mmengine - INFO - Epoch(test) [2150/6019]    eta: 0:35:36  time: 0.5621  data_time: 0.0072  memory: 430  
2024/12/09 04:41:52 - mmengine - INFO - Epoch(test) [2200/6019]    eta: 0:35:12  time: 0.5841  data_time: 0.0075  memory: 431  
2024/12/09 04:42:20 - mmengine - INFO - Epoch(test) [2250/6019]    eta: 0:34:44  time: 0.5538  data_time: 0.0072  memory: 431  
2024/12/09 04:42:46 - mmengine - INFO - Epoch(test) [2300/6019]    eta: 0:34:14  time: 0.5194  data_time: 0.0071  memory: 431  
2024/12/09 04:43:10 - mmengine - INFO - Epoch(test) [2350/6019]    eta: 0:33:40  time: 0.4800  data_time: 0.0068  memory: 430  
2024/12/09 04:43:37 - mmengine - INFO - Epoch(test) [2400/6019]    eta: 0:33:12  time: 0.5405  data_time: 0.0073  memory: 430  
2024/12/09 04:44:03 - mmengine - INFO - Epoch(test) [2450/6019]    eta: 0:32:43  time: 0.5247  data_time: 0.0067  memory: 430  
2024/12/09 04:44:28 - mmengine - INFO - Epoch(test) [2500/6019]    eta: 0:32:12  time: 0.5066  data_time: 0.0069  memory: 430  
2024/12/09 04:44:55 - mmengine - INFO - Epoch(test) [2550/6019]    eta: 0:31:44  time: 0.5397  data_time: 0.0072  memory: 431  
2024/12/09 04:45:20 - mmengine - INFO - Epoch(test) [2600/6019]    eta: 0:31:12  time: 0.4867  data_time: 0.0068  memory: 430  
2024/12/09 04:45:46 - mmengine - INFO - Epoch(test) [2650/6019]    eta: 0:30:44  time: 0.5341  data_time: 0.0074  memory: 431  
2024/12/09 04:46:14 - mmengine - INFO - Epoch(test) [2700/6019]    eta: 0:30:17  time: 0.5448  data_time: 0.0071  memory: 430  
2024/12/09 04:46:40 - mmengine - INFO - Epoch(test) [2750/6019]    eta: 0:29:48  time: 0.5212  data_time: 0.0071  memory: 430  
2024/12/09 04:47:07 - mmengine - INFO - Epoch(test) [2800/6019]    eta: 0:29:20  time: 0.5386  data_time: 0.0072  memory: 430  
2024/12/09 04:47:34 - mmengine - INFO - Epoch(test) [2850/6019]    eta: 0:28:52  time: 0.5384  data_time: 0.0072  memory: 430  
2024/12/09 04:48:00 - mmengine - INFO - Epoch(test) [2900/6019]    eta: 0:28:24  time: 0.5279  data_time: 0.0068  memory: 430  
2024/12/09 04:48:26 - mmengine - INFO - Epoch(test) [2950/6019]    eta: 0:27:55  time: 0.5217  data_time: 0.0075  memory: 430  
2024/12/09 04:48:53 - mmengine - INFO - Epoch(test) [3000/6019]    eta: 0:27:28  time: 0.5440  data_time: 0.0070  memory: 430  
2024/12/09 04:49:21 - mmengine - INFO - Epoch(test) [3050/6019]    eta: 0:27:00  time: 0.5482  data_time: 0.0068  memory: 430  
2024/12/09 04:49:47 - mmengine - INFO - Epoch(test) [3100/6019]    eta: 0:26:32  time: 0.5177  data_time: 0.0073  memory: 430  
2024/12/09 04:50:09 - mmengine - INFO - Epoch(test) [3150/6019]    eta: 0:26:00  time: 0.4519  data_time: 0.0067  memory: 430  
2024/12/09 04:50:35 - mmengine - INFO - Epoch(test) [3200/6019]    eta: 0:25:32  time: 0.5151  data_time: 0.0068  memory: 430  
2024/12/09 04:51:03 - mmengine - INFO - Epoch(test) [3250/6019]    eta: 0:25:05  time: 0.5537  data_time: 0.0074  memory: 430  
2024/12/09 04:51:30 - mmengine - INFO - Epoch(test) [3300/6019]    eta: 0:24:38  time: 0.5376  data_time: 0.0070  memory: 430  
2024/12/09 04:51:54 - mmengine - INFO - Epoch(test) [3350/6019]    eta: 0:24:08  time: 0.4926  data_time: 0.0068  memory: 430  
2024/12/09 04:52:19 - mmengine - INFO - Epoch(test) [3400/6019]    eta: 0:23:39  time: 0.4923  data_time: 0.0066  memory: 430  
2024/12/09 04:52:44 - mmengine - INFO - Epoch(test) [3450/6019]    eta: 0:23:11  time: 0.5004  data_time: 0.0066  memory: 430  
2024/12/09 04:53:09 - mmengine - INFO - Epoch(test) [3500/6019]    eta: 0:22:42  time: 0.5068  data_time: 0.0069  memory: 430  
2024/12/09 04:53:33 - mmengine - INFO - Epoch(test) [3550/6019]    eta: 0:22:13  time: 0.4779  data_time: 0.0067  memory: 430  
2024/12/09 04:54:00 - mmengine - INFO - Epoch(test) [3600/6019]    eta: 0:21:46  time: 0.5324  data_time: 0.0069  memory: 430  
2024/12/09 04:54:27 - mmengine - INFO - Epoch(test) [3650/6019]    eta: 0:21:19  time: 0.5436  data_time: 0.0070  memory: 430  
2024/12/09 04:54:51 - mmengine - INFO - Epoch(test) [3700/6019]    eta: 0:20:50  time: 0.4721  data_time: 0.0068  memory: 430  
2024/12/09 04:55:18 - mmengine - INFO - Epoch(test) [3750/6019]    eta: 0:20:23  time: 0.5404  data_time: 0.0071  memory: 431  
2024/12/09 04:55:47 - mmengine - INFO - Epoch(test) [3800/6019]    eta: 0:19:57  time: 0.5805  data_time: 0.0072  memory: 431  
2024/12/09 04:56:14 - mmengine - INFO - Epoch(test) [3850/6019]    eta: 0:19:30  time: 0.5397  data_time: 0.0068  memory: 430  
2024/12/09 04:56:43 - mmengine - INFO - Epoch(test) [3900/6019]    eta: 0:19:04  time: 0.5865  data_time: 0.0071  memory: 432  
2024/12/09 04:57:12 - mmengine - INFO - Epoch(test) [3950/6019]    eta: 0:18:38  time: 0.5747  data_time: 0.0072  memory: 431  
2024/12/09 04:57:41 - mmengine - INFO - Epoch(test) [4000/6019]    eta: 0:18:12  time: 0.5773  data_time: 0.0072  memory: 431  
2024/12/09 04:58:07 - mmengine - INFO - Epoch(test) [4050/6019]    eta: 0:17:45  time: 0.5281  data_time: 0.0071  memory: 430  
2024/12/09 04:58:34 - mmengine - INFO - Epoch(test) [4100/6019]    eta: 0:17:18  time: 0.5337  data_time: 0.0070  memory: 430  
2024/12/09 04:59:02 - mmengine - INFO - Epoch(test) [4150/6019]    eta: 0:16:51  time: 0.5626  data_time: 0.0072  memory: 431  
2024/12/09 04:59:30 - mmengine - INFO - Epoch(test) [4200/6019]    eta: 0:16:24  time: 0.5542  data_time: 0.0071  memory: 431  
2024/12/09 04:59:56 - mmengine - INFO - Epoch(test) [4250/6019]    eta: 0:15:57  time: 0.5351  data_time: 0.0071  memory: 430  
2024/12/09 05:00:22 - mmengine - INFO - Epoch(test) [4300/6019]    eta: 0:15:30  time: 0.5219  data_time: 0.0073  memory: 430  
2024/12/09 05:00:49 - mmengine - INFO - Epoch(test) [4350/6019]    eta: 0:15:03  time: 0.5391  data_time: 0.0072  memory: 430  
2024/12/09 05:01:17 - mmengine - INFO - Epoch(test) [4400/6019]    eta: 0:14:36  time: 0.5578  data_time: 0.0078  memory: 430  
2024/12/09 05:01:45 - mmengine - INFO - Epoch(test) [4450/6019]    eta: 0:14:09  time: 0.5536  data_time: 0.0072  memory: 430  
2024/12/09 05:02:12 - mmengine - INFO - Epoch(test) [4500/6019]    eta: 0:13:42  time: 0.5385  data_time: 0.0074  memory: 431  
2024/12/09 05:02:39 - mmengine - INFO - Epoch(test) [4550/6019]    eta: 0:13:15  time: 0.5450  data_time: 0.0073  memory: 431  
2024/12/09 05:03:07 - mmengine - INFO - Epoch(test) [4600/6019]    eta: 0:12:48  time: 0.5544  data_time: 0.0069  memory: 431  
2024/12/09 05:03:35 - mmengine - INFO - Epoch(test) [4650/6019]    eta: 0:12:21  time: 0.5599  data_time: 0.0070  memory: 431  
2024/12/09 05:04:03 - mmengine - INFO - Epoch(test) [4700/6019]    eta: 0:11:54  time: 0.5569  data_time: 0.0071  memory: 432  
2024/12/09 05:04:31 - mmengine - INFO - Epoch(test) [4750/6019]    eta: 0:11:27  time: 0.5619  data_time: 0.0072  memory: 431  
2024/12/09 05:04:59 - mmengine - INFO - Epoch(test) [4800/6019]    eta: 0:11:01  time: 0.5635  data_time: 0.0070  memory: 432  
2024/12/09 05:05:26 - mmengine - INFO - Epoch(test) [4850/6019]    eta: 0:10:33  time: 0.5390  data_time: 0.0068  memory: 431  
2024/12/09 05:05:53 - mmengine - INFO - Epoch(test) [4900/6019]    eta: 0:10:06  time: 0.5423  data_time: 0.0069  memory: 430  
2024/12/09 05:06:20 - mmengine - INFO - Epoch(test) [4950/6019]    eta: 0:09:39  time: 0.5336  data_time: 0.0069  memory: 430  
2024/12/09 05:06:47 - mmengine - INFO - Epoch(test) [5000/6019]    eta: 0:09:12  time: 0.5502  data_time: 0.0071  memory: 431  
2024/12/09 05:07:14 - mmengine - INFO - Epoch(test) [5050/6019]    eta: 0:08:45  time: 0.5321  data_time: 0.0069  memory: 430  
2024/12/09 05:07:41 - mmengine - INFO - Epoch(test) [5100/6019]    eta: 0:08:18  time: 0.5363  data_time: 0.0071  memory: 431  
2024/12/09 05:08:10 - mmengine - INFO - Epoch(test) [5150/6019]    eta: 0:07:51  time: 0.5773  data_time: 0.0074  memory: 432  
2024/12/09 05:08:36 - mmengine - INFO - Epoch(test) [5200/6019]    eta: 0:07:24  time: 0.5348  data_time: 0.0073  memory: 431  
2024/12/09 05:09:03 - mmengine - INFO - Epoch(test) [5250/6019]    eta: 0:06:57  time: 0.5342  data_time: 0.0072  memory: 431  
2024/12/09 05:09:28 - mmengine - INFO - Epoch(test) [5300/6019]    eta: 0:06:29  time: 0.5024  data_time: 0.0070  memory: 430  
2024/12/09 05:09:54 - mmengine - INFO - Epoch(test) [5350/6019]    eta: 0:06:02  time: 0.5154  data_time: 0.0070  memory: 430  
2024/12/09 05:10:21 - mmengine - INFO - Epoch(test) [5400/6019]    eta: 0:05:35  time: 0.5427  data_time: 0.0070  memory: 431  
2024/12/09 05:10:48 - mmengine - INFO - Epoch(test) [5450/6019]    eta: 0:05:08  time: 0.5386  data_time: 0.0072  memory: 430  
2024/12/09 05:11:16 - mmengine - INFO - Epoch(test) [5500/6019]    eta: 0:04:41  time: 0.5572  data_time: 0.0070  memory: 431  
2024/12/09 05:11:44 - mmengine - INFO - Epoch(test) [5550/6019]    eta: 0:04:14  time: 0.5655  data_time: 0.0067  memory: 430  
2024/12/09 05:12:13 - mmengine - INFO - Epoch(test) [5600/6019]    eta: 0:03:47  time: 0.5677  data_time: 0.0072  memory: 431  
2024/12/09 05:12:40 - mmengine - INFO - Epoch(test) [5650/6019]    eta: 0:03:20  time: 0.5554  data_time: 0.0069  memory: 431  
2024/12/09 05:13:10 - mmengine - INFO - Epoch(test) [5700/6019]    eta: 0:02:53  time: 0.5847  data_time: 0.0072  memory: 431  
2024/12/09 05:13:38 - mmengine - INFO - Epoch(test) [5750/6019]    eta: 0:02:26  time: 0.5759  data_time: 0.0071  memory: 431  
2024/12/09 05:14:05 - mmengine - INFO - Epoch(test) [5800/6019]    eta: 0:01:58  time: 0.5338  data_time: 0.0067  memory: 430  
2024/12/09 05:14:34 - mmengine - INFO - Epoch(test) [5850/6019]    eta: 0:01:31  time: 0.5691  data_time: 0.0072  memory: 432  
2024/12/09 05:15:03 - mmengine - INFO - Epoch(test) [5900/6019]    eta: 0:01:04  time: 0.5865  data_time: 0.0074  memory: 431  
2024/12/09 05:15:32 - mmengine - INFO - Epoch(test) [5950/6019]    eta: 0:00:37  time: 0.5764  data_time: 0.0072  memory: 431  
2024/12/09 05:15:58 - mmengine - INFO - Epoch(test) [6000/6019]    eta: 0:00:10  time: 0.5297  data_time: 0.0070  memory: 430  
2024/12/09 05:43:00 - mmengine - INFO - Epoch(test) [6019/6019]    NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_0.5: 0.7485  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_1.0: 0.8478  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_2.0: 0.8832  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_4.0: 0.8967  NuScenes metric/pred_instances_3d_NuScenes/car_trans_err: 0.1834  NuScenes metric/pred_instances_3d_NuScenes/car_scale_err: 0.1565  NuScenes metric/pred_instances_3d_NuScenes/car_orient_err: 0.1261  NuScenes metric/pred_instances_3d_NuScenes/car_vel_err: 0.3081  NuScenes metric/pred_instances_3d_NuScenes/car_attr_err: 0.1870  NuScenes metric/pred_instances_3d_NuScenes/mATE: 0.2909  NuScenes metric/pred_instances_3d_NuScenes/mASE: 0.2593  NuScenes metric/pred_instances_3d_NuScenes/mAOE: 0.3481  NuScenes metric/pred_instances_3d_NuScenes/mAVE: 0.2957  NuScenes metric/pred_instances_3d_NuScenes/mAAE: 0.1914  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_0.5: 0.3946  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_1.0: 0.5663  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_2.0: 0.6404  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_4.0: 0.6748  NuScenes metric/pred_instances_3d_NuScenes/truck_trans_err: 0.3154  NuScenes metric/pred_instances_3d_NuScenes/truck_scale_err: 0.1835  NuScenes metric/pred_instances_3d_NuScenes/truck_orient_err: 0.1400  NuScenes metric/pred_instances_3d_NuScenes/truck_vel_err: 0.2804  NuScenes metric/pred_instances_3d_NuScenes/truck_attr_err: 0.2269  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_0.5: 0.0196  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_1.0: 0.0954  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_2.0: 0.2049  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_4.0: 0.2869  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_trans_err: 0.7307  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_scale_err: 0.4568  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_orient_err: 1.0075  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_vel_err: 0.1345  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_attr_err: 0.3345  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_0.5: 0.4179  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_1.0: 0.6721  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_2.0: 0.8009  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_4.0: 0.8214  NuScenes metric/pred_instances_3d_NuScenes/bus_trans_err: 0.3402  NuScenes metric/pred_instances_3d_NuScenes/bus_scale_err: 0.1964  NuScenes metric/pred_instances_3d_NuScenes/bus_orient_err: 0.0855  NuScenes metric/pred_instances_3d_NuScenes/bus_vel_err: 0.4746  NuScenes metric/pred_instances_3d_NuScenes/bus_attr_err: 0.2499  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_0.5: 0.0998  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_1.0: 0.3185  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_2.0: 0.4287  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_4.0: 0.5105  NuScenes metric/pred_instances_3d_NuScenes/trailer_trans_err: 0.5003  NuScenes metric/pred_instances_3d_NuScenes/trailer_scale_err: 0.2044  NuScenes metric/pred_instances_3d_NuScenes/trailer_orient_err: 0.5708  NuScenes metric/pred_instances_3d_NuScenes/trailer_vel_err: 0.2517  NuScenes metric/pred_instances_3d_NuScenes/trailer_attr_err: 0.1711  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_0.5: 0.5824  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_1.0: 0.6851  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_2.0: 0.7260  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_4.0: 0.7387  NuScenes metric/pred_instances_3d_NuScenes/barrier_trans_err: 0.1981  NuScenes metric/pred_instances_3d_NuScenes/barrier_scale_err: 0.2799  NuScenes metric/pred_instances_3d_NuScenes/barrier_orient_err: 0.0664  NuScenes metric/pred_instances_3d_NuScenes/barrier_vel_err: nan  NuScenes metric/pred_instances_3d_NuScenes/barrier_attr_err: nan  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_0.5: 0.4518  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_1.0: 0.5036  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_2.0: 0.5160  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_4.0: 0.5215  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_trans_err: 0.1977  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_scale_err: 0.2357  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_orient_err: 0.2840  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_vel_err: 0.4821  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_attr_err: 0.2482  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_0.5: 0.3539  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_1.0: 0.3669  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_2.0: 0.3684  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_4.0: 0.3710  NuScenes metric/pred_instances_3d_NuScenes/bicycle_trans_err: 0.1599  NuScenes metric/pred_instances_3d_NuScenes/bicycle_scale_err: 0.2644  NuScenes metric/pred_instances_3d_NuScenes/bicycle_orient_err: 0.4575  NuScenes metric/pred_instances_3d_NuScenes/bicycle_vel_err: 0.1920  NuScenes metric/pred_instances_3d_NuScenes/bicycle_attr_err: 0.0175  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_0.5: 0.8059  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_1.0: 0.8203  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_2.0: 0.8330  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_4.0: 0.8467  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_trans_err: 0.1429  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_scale_err: 0.2846  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_orient_err: 0.3953  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_vel_err: 0.2420  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_attr_err: 0.0962  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_0.5: 0.6343  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_1.0: 0.6466  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_2.0: 0.6662  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_4.0: 0.7000  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_trans_err: 0.1401  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_scale_err: 0.3311  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_orient_err: nan  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_vel_err: nan  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_attr_err: nan  NuScenes metric/pred_instances_3d_NuScenes/NDS: 0.6423  NuScenes metric/pred_instances_3d_NuScenes/mAP: 0.5617  data_time: 0.0072  time: 0.5437
