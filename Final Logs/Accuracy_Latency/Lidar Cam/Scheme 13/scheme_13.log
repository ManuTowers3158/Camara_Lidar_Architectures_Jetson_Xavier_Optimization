2024/12/05 22:51:22 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.10 (default, Jul 29 2024, 17:02:10) [GCC 9.4.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 177794190
    GPU 0: Xavier
    CUDA_HOME: /usr/local/cuda-11.4
    NVCC: Cuda compilation tools, release 11.4, V11.4.315
    GCC: aarch64-linux-gnu-gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
    PyTorch: 1.11.0
    PyTorch compiling details: PyTorch built with:
  - GCC 9.4
  - C++ Version: 201402
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: NO AVX
  - CUDA Runtime 11.4
  - NVCC architecture flags: -gencode;arch=compute_72,code=sm_72;-gencode;arch=compute_87,code=sm_87
  - CuDNN 8.6
    - Built with CuDNN 8.3.2
  - Build settings: BLAS_INFO=open, BUILD_TYPE=Release, CUDA_VERSION=11.4, CUDNN_VERSION=8.3.2, CXX_COMPILER=/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, FORCE_FALLBACK_CUDA_MPI=1, LAPACK_INFO=open, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EIGEN_FOR_BLAS=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=OFF, USE_MKLDNN=OFF, USE_MPI=ON, USE_NCCL=0, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0
    OpenCV: 4.10.0
    MMEngine: 0.10.5

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 177794190
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/12/05 22:51:24 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=32, enable=False)
backend_args = None
class_names = [
    'car',
    'truck',
    'construction_vehicle',
    'bus',
    'trailer',
    'barrier',
    'motorcycle',
    'bicycle',
    'pedestrian',
    'traffic_cone',
]
custom_imports = dict(
    allow_failed_imports=False, imports=[
        'projects.BEVFusion.bevfusion',
    ])
data_prefix = dict(
    CAM_BACK='samples/CAM_BACK',
    CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
    CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
    CAM_FRONT='samples/CAM_FRONT',
    CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
    CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
    pts='samples/LIDAR_TOP',
    sweeps='sweeps/LIDAR_TOP')
data_root = '/media/xavier02/Sparkles1/nuscenes/'
dataset_type = 'NuScenesDataset'
db_sampler = dict(
    classes=[
        'car',
        'truck',
        'construction_vehicle',
        'bus',
        'trailer',
        'barrier',
        'motorcycle',
        'bicycle',
        'pedestrian',
        'traffic_cone',
    ],
    data_root='/media/xavier02/Sparkles1/nuscenes/',
    info_path='/media/xavier02/Sparkles1/nuscenes/nuscenes_dbinfos_train.pkl',
    points_loader=dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='LoadPointsFromFile',
        use_dim=[
            0,
            1,
            2,
            3,
            4,
        ]),
    prepare=dict(
        filter_by_difficulty=[
            -1,
        ],
        filter_by_min_points=dict(
            barrier=5,
            bicycle=5,
            bus=5,
            car=5,
            construction_vehicle=5,
            motorcycle=5,
            pedestrian=5,
            traffic_cone=5,
            trailer=5,
            truck=5)),
    rate=1.0,
    sample_groups=dict(
        barrier=2,
        bicycle=6,
        bus=4,
        car=2,
        construction_vehicle=7,
        motorcycle=6,
        pedestrian=2,
        traffic_cone=2,
        trailer=6,
        truck=3))
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(type='Det3DVisualizationHook'))
default_scope = 'mmdet3d'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
input_modality = dict(use_camera=True, use_lidar=True)
launcher = 'none'
load_from = '/media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/Cam_lid_ep6_fp16.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=True, type='LogProcessor', window_size=50)
lr = 0.0001
metainfo = dict(classes=[
    'car',
    'truck',
    'construction_vehicle',
    'bus',
    'trailer',
    'barrier',
    'motorcycle',
    'bicycle',
    'pedestrian',
    'traffic_cone',
])
model = dict(
    bbox_head=dict(
        auxiliary=True,
        bbox_coder=dict(
            code_size=10,
            out_size_factor=8,
            pc_range=[
                -54.0,
                -54.0,
            ],
            post_center_range=[
                -61.2,
                -61.2,
                -10.0,
                61.2,
                61.2,
                10.0,
            ],
            score_threshold=0.0,
            type='TransFusionBBoxCoder',
            voxel_size=[
                0.075,
                0.075,
            ]),
        bn_momentum=0.1,
        common_heads=dict(
            center=[
                2,
                2,
            ],
            dim=[
                3,
                2,
            ],
            height=[
                1,
                2,
            ],
            rot=[
                2,
                2,
            ],
            vel=[
                2,
                2,
            ]),
        decoder_layer=dict(
            cross_attn_cfg=dict(dropout=0.1, embed_dims=128, num_heads=8),
            ffn_cfg=dict(
                act_cfg=dict(inplace=True, type='ReLU'),
                embed_dims=128,
                feedforward_channels=256,
                ffn_drop=0.1,
                num_fcs=2),
            norm_cfg=dict(type='LN'),
            pos_encoding_cfg=dict(input_channel=2, num_pos_feats=128),
            self_attn_cfg=dict(dropout=0.1, embed_dims=128, num_heads=8),
            type='TransformerDecoderLayer'),
        hidden_channel=128,
        in_channels=512,
        loss_bbox=dict(
            loss_weight=0.25, reduction='mean', type='mmdet.L1Loss'),
        loss_cls=dict(
            alpha=0.25,
            gamma=2.0,
            loss_weight=1.0,
            reduction='mean',
            type='mmdet.FocalLoss',
            use_sigmoid=True),
        loss_heatmap=dict(
            loss_weight=1.0, reduction='mean', type='mmdet.GaussianFocalLoss'),
        nms_kernel_size=3,
        num_classes=10,
        num_decoder_layers=1,
        num_proposals=200,
        test_cfg=dict(
            dataset='nuScenes',
            grid_size=[
                1440,
                1440,
                41,
            ],
            nms_type=None,
            out_size_factor=8,
            pc_range=[
                -54.0,
                -54.0,
            ],
            voxel_size=[
                0.075,
                0.075,
            ]),
        train_cfg=dict(
            assigner=dict(
                cls_cost=dict(
                    alpha=0.25,
                    gamma=2.0,
                    type='mmdet.FocalLossCost',
                    weight=0.15),
                iou_calculator=dict(coordinate='lidar', type='BboxOverlaps3D'),
                iou_cost=dict(type='IoU3DCost', weight=0.25),
                reg_cost=dict(type='BBoxBEVL1Cost', weight=0.25),
                type='HungarianAssigner3D'),
            code_weights=[
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.2,
                0.2,
            ],
            dataset='nuScenes',
            gaussian_overlap=0.1,
            grid_size=[
                1440,
                1440,
                41,
            ],
            min_radius=2,
            out_size_factor=8,
            point_cloud_range=[
                -54.0,
                -54.0,
                -5.0,
                54.0,
                54.0,
                3.0,
            ],
            pos_weight=-1,
            voxel_size=[
                0.075,
                0.075,
                0.2,
            ]),
        type='TransFusionHead'),
    data_preprocessor=dict(
        bgr_to_rgb=False,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_size_divisor=32,
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='Det3DDataPreprocessor',
        voxelize_cfg=dict(
            max_num_points=10,
            max_voxels=[
                120000,
                160000,
            ],
            point_cloud_range=[
                -54.0,
                -54.0,
                -5.0,
                54.0,
                54.0,
                3.0,
            ],
            voxel_size=[
                0.075,
                0.075,
                0.2,
            ],
            voxelize_reduce=True)),
    fusion_layer=dict(
        in_channels=[
            80,
            256,
        ], out_channels=256, type='ConvFuser'),
    img_backbone=dict(
        depth=18,
        frozen_stages=1,
        init_cfg=dict(
            checkpoint=
            '/media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth',
            type='Pretrained'),
        norm_cfg=dict(requires_grad=True, type='BN'),
        norm_eval=True,
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        style='pytorch',
        type='mmdet.ResNet'),
    img_neck=dict(
        act_cfg=dict(inplace=True, type='ReLU'),
        in_channels=[
            64,
            128,
            256,
            512,
        ],
        norm_cfg=dict(requires_grad=True, type='BN2d'),
        num_outs=3,
        out_channels=256,
        start_level=0,
        type='GeneralizedLSSFPN_2',
        upsample_cfg=dict(align_corners=False, mode='bilinear')),
    pts_backbone=dict(
        conv_cfg=dict(bias=False, type='Conv2d'),
        in_channels=256,
        layer_nums=[
            5,
            5,
        ],
        layer_strides=[
            1,
            2,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.01, type='BN'),
        out_channels=[
            128,
            256,
        ],
        type='SECOND'),
    pts_middle_encoder=dict(
        block_type='basicblock',
        encoder_channels=(
            (
                16,
                16,
                32,
            ),
            (
                32,
                32,
                64,
            ),
            (
                64,
                64,
                128,
            ),
            (
                128,
                128,
            ),
        ),
        encoder_paddings=(
            (
                0,
                0,
                1,
            ),
            (
                0,
                0,
                1,
            ),
            (
                0,
                0,
                (
                    1,
                    1,
                    0,
                ),
            ),
            (
                0,
                0,
            ),
        ),
        in_channels=5,
        norm_cfg=dict(eps=0.001, momentum=0.01, type='BN1d'),
        order=(
            'conv',
            'norm',
            'act',
        ),
        sparse_shape=[
            1440,
            1440,
            41,
        ],
        type='BEVFusionSparseEncoder'),
    pts_neck=dict(
        in_channels=[
            128,
            256,
        ],
        norm_cfg=dict(eps=0.001, momentum=0.01, type='BN'),
        out_channels=[
            256,
            256,
        ],
        type='SECONDFPN',
        upsample_cfg=dict(bias=False, type='deconv'),
        upsample_strides=[
            1,
            2,
        ],
        use_conv_for_no_stride=True),
    pts_voxel_encoder=dict(num_features=5, type='HardSimpleVFE'),
    type='BEVFusion',
    view_transform=dict(
        dbound=[
            1.0,
            60.0,
            0.5,
        ],
        downsample=2,
        feature_size=[
            32,
            88,
        ],
        image_size=[
            256,
            704,
        ],
        in_channels=256,
        out_channels=80,
        type='DepthLSSTransform',
        xbound=[
            -54.0,
            54.0,
            0.3,
        ],
        ybound=[
            -54.0,
            54.0,
            0.3,
        ],
        zbound=[
            -10.0,
            10.0,
            20.0,
        ]))
optim_wrapper = dict(
    clip_grad=dict(max_norm=35, norm_type=2),
    optimizer=dict(lr=0.0002, type='AdamW', weight_decay=0.01),
    type='OptimWrapper')
param_scheduler = [
    dict(
        begin=0,
        by_epoch=False,
        end=500,
        start_factor=0.33333333,
        type='LinearLR'),
    dict(
        T_max=6,
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=6,
        eta_min_ratio=0.0001,
        type='CosineAnnealingLR'),
    dict(
        begin=0,
        by_epoch=True,
        convert_to_iter_based=True,
        end=2.4,
        eta_min=0.8947368421052632,
        type='CosineAnnealingMomentum'),
    dict(
        begin=2.4,
        by_epoch=True,
        convert_to_iter_based=True,
        end=6,
        eta_min=1,
        type='CosineAnnealingMomentum'),
]
point_cloud_range = [
    -54.0,
    -54.0,
    -5.0,
    54.0,
    54.0,
    3.0,
]
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='nuscenes_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            pts='samples/LIDAR_TOP',
            sweeps='sweeps/LIDAR_TOP'),
        data_root='/media/xavier02/Sparkles1/nuscenes/',
        metainfo=dict(classes=[
            'car',
            'truck',
            'construction_vehicle',
            'bus',
            'trailer',
            'barrier',
            'motorcycle',
            'bicycle',
            'pedestrian',
            'traffic_cone',
        ]),
        modality=dict(use_camera=True, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                color_type='color',
                to_float32=True,
                type='BEVLoadMultiViewImageFromFiles'),
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=5,
                type='LoadPointsFromFile',
                use_dim=5),
            dict(
                backend_args=None,
                load_dim=5,
                pad_empty_sweeps=True,
                remove_close=True,
                sweeps_num=4,
                type='LoadPointsFromMultiSweeps',
                use_dim=5),
            dict(
                bot_pct_lim=[
                    0.0,
                    0.0,
                ],
                final_dim=[
                    256,
                    704,
                ],
                is_train=False,
                rand_flip=False,
                resize_lim=[
                    0.48,
                    0.48,
                ],
                rot_lim=[
                    0.0,
                    0.0,
                ],
                type='ImageAug3D'),
            dict(
                point_cloud_range=[
                    -54.0,
                    -54.0,
                    -5.0,
                    54.0,
                    54.0,
                    3.0,
                ],
                type='PointsRangeFilter'),
            dict(
                keys=[
                    'img',
                    'points',
                    'gt_bboxes_3d',
                    'gt_labels_3d',
                ],
                meta_keys=[
                    'cam2img',
                    'ori_cam2img',
                    'lidar2cam',
                    'lidar2img',
                    'cam2lidar',
                    'ori_lidar2img',
                    'img_aug_matrix',
                    'box_type_3d',
                    'sample_idx',
                    'lidar_path',
                    'img_path',
                    'num_pts_feats',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='NuScenesDataset'),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='/media/xavier02/Sparkles1/nuscenes/nuscenes_infos_val.pkl',
    backend_args=None,
    data_root='/media/xavier02/Sparkles1/nuscenes/',
    metric='bbox',
    type='NuScenesMetric')
test_pipeline = [
    dict(
        backend_args=None,
        color_type='color',
        to_float32=True,
        type='BEVLoadMultiViewImageFromFiles'),
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='LoadPointsFromFile',
        use_dim=5),
    dict(
        backend_args=None,
        load_dim=5,
        pad_empty_sweeps=True,
        remove_close=True,
        sweeps_num=4,
        type='LoadPointsFromMultiSweeps',
        use_dim=5),
    dict(
        bot_pct_lim=[
            0.0,
            0.0,
        ],
        final_dim=[
            256,
            704,
        ],
        is_train=False,
        rand_flip=False,
        resize_lim=[
            0.48,
            0.48,
        ],
        rot_lim=[
            0.0,
            0.0,
        ],
        type='ImageAug3D'),
    dict(
        point_cloud_range=[
            -54.0,
            -54.0,
            -5.0,
            54.0,
            54.0,
            3.0,
        ],
        type='PointsRangeFilter'),
    dict(
        keys=[
            'img',
            'points',
            'gt_bboxes_3d',
            'gt_labels_3d',
        ],
        meta_keys=[
            'cam2img',
            'ori_cam2img',
            'lidar2cam',
            'lidar2img',
            'cam2lidar',
            'ori_lidar2img',
            'img_aug_matrix',
            'box_type_3d',
            'sample_idx',
            'lidar_path',
            'img_path',
            'num_pts_feats',
        ],
        type='Pack3DDetInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=6, val_interval=1)
train_dataloader = dict(
    batch_size=1,
    dataset=dict(
        dataset=dict(
            ann_file='nuscenes_infos_train.pkl',
            box_type_3d='LiDAR',
            data_prefix=dict(
                CAM_BACK='samples/CAM_BACK',
                CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
                CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
                CAM_FRONT='samples/CAM_FRONT',
                CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
                CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
                pts='samples/LIDAR_TOP',
                sweeps='sweeps/LIDAR_TOP'),
            data_root='/media/xavier02/Sparkles1/nuscenes/',
            metainfo=dict(classes=[
                'car',
                'truck',
                'construction_vehicle',
                'bus',
                'trailer',
                'barrier',
                'motorcycle',
                'bicycle',
                'pedestrian',
                'traffic_cone',
            ]),
            modality=dict(use_camera=True, use_lidar=True),
            pipeline=[
                dict(
                    backend_args=None,
                    color_type='color',
                    to_float32=True,
                    type='BEVLoadMultiViewImageFromFiles'),
                dict(
                    backend_args=None,
                    coord_type='LIDAR',
                    load_dim=5,
                    type='LoadPointsFromFile',
                    use_dim=5),
                dict(
                    backend_args=None,
                    load_dim=5,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    sweeps_num=9,
                    type='LoadPointsFromMultiSweeps',
                    use_dim=5),
                dict(
                    type='LoadAnnotations3D',
                    with_attr_label=False,
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    bot_pct_lim=[
                        0.0,
                        0.0,
                    ],
                    final_dim=[
                        256,
                        704,
                    ],
                    is_train=True,
                    rand_flip=True,
                    resize_lim=[
                        0.38,
                        0.55,
                    ],
                    rot_lim=[
                        -5.4,
                        5.4,
                    ],
                    type='ImageAug3D'),
                dict(
                    rot_range=[
                        -0.78539816,
                        0.78539816,
                    ],
                    scale_ratio_range=[
                        0.9,
                        1.1,
                    ],
                    translation_std=0.5,
                    type='BEVFusionGlobalRotScaleTrans'),
                dict(type='BEVFusionRandomFlip3D'),
                dict(
                    point_cloud_range=[
                        -54.0,
                        -54.0,
                        -5.0,
                        54.0,
                        54.0,
                        3.0,
                    ],
                    type='PointsRangeFilter'),
                dict(
                    point_cloud_range=[
                        -54.0,
                        -54.0,
                        -5.0,
                        54.0,
                        54.0,
                        3.0,
                    ],
                    type='ObjectRangeFilter'),
                dict(
                    classes=[
                        'car',
                        'truck',
                        'construction_vehicle',
                        'bus',
                        'trailer',
                        'barrier',
                        'motorcycle',
                        'bicycle',
                        'pedestrian',
                        'traffic_cone',
                    ],
                    type='ObjectNameFilter'),
                dict(
                    fixed_prob=True,
                    max_epoch=6,
                    mode=1,
                    offset=False,
                    prob=0.0,
                    ratio=0.5,
                    rotate=1,
                    type='GridMask',
                    use_h=True,
                    use_w=True),
                dict(type='PointShuffle'),
                dict(
                    keys=[
                        'points',
                        'img',
                        'gt_bboxes_3d',
                        'gt_labels_3d',
                        'gt_bboxes',
                        'gt_labels',
                    ],
                    meta_keys=[
                        'cam2img',
                        'ori_cam2img',
                        'lidar2cam',
                        'lidar2img',
                        'cam2lidar',
                        'ori_lidar2img',
                        'img_aug_matrix',
                        'box_type_3d',
                        'sample_idx',
                        'lidar_path',
                        'img_path',
                        'transformation_3d_flow',
                        'pcd_rotation',
                        'pcd_scale_factor',
                        'pcd_trans',
                        'img_aug_matrix',
                        'lidar_aug_matrix',
                        'num_pts_feats',
                    ],
                    type='Pack3DDetInputs'),
            ],
            test_mode=False,
            type='NuScenesDataset',
            use_valid_flag=True),
        type='CBGSDataset'),
    num_workers=1,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(
        backend_args=None,
        color_type='color',
        to_float32=True,
        type='BEVLoadMultiViewImageFromFiles'),
    dict(
        backend_args=None,
        coord_type='LIDAR',
        load_dim=5,
        type='LoadPointsFromFile',
        use_dim=5),
    dict(
        backend_args=None,
        load_dim=5,
        pad_empty_sweeps=True,
        remove_close=True,
        sweeps_num=9,
        type='LoadPointsFromMultiSweeps',
        use_dim=5),
    dict(
        type='LoadAnnotations3D',
        with_attr_label=False,
        with_bbox_3d=True,
        with_label_3d=True),
    dict(
        bot_pct_lim=[
            0.0,
            0.0,
        ],
        final_dim=[
            256,
            704,
        ],
        is_train=True,
        rand_flip=True,
        resize_lim=[
            0.38,
            0.55,
        ],
        rot_lim=[
            -5.4,
            5.4,
        ],
        type='ImageAug3D'),
    dict(
        rot_range=[
            -0.78539816,
            0.78539816,
        ],
        scale_ratio_range=[
            0.9,
            1.1,
        ],
        translation_std=0.5,
        type='BEVFusionGlobalRotScaleTrans'),
    dict(type='BEVFusionRandomFlip3D'),
    dict(
        point_cloud_range=[
            -54.0,
            -54.0,
            -5.0,
            54.0,
            54.0,
            3.0,
        ],
        type='PointsRangeFilter'),
    dict(
        point_cloud_range=[
            -54.0,
            -54.0,
            -5.0,
            54.0,
            54.0,
            3.0,
        ],
        type='ObjectRangeFilter'),
    dict(
        classes=[
            'car',
            'truck',
            'construction_vehicle',
            'bus',
            'trailer',
            'barrier',
            'motorcycle',
            'bicycle',
            'pedestrian',
            'traffic_cone',
        ],
        type='ObjectNameFilter'),
    dict(
        fixed_prob=True,
        max_epoch=6,
        mode=1,
        offset=False,
        prob=0.0,
        ratio=0.5,
        rotate=1,
        type='GridMask',
        use_h=True,
        use_w=True),
    dict(type='PointShuffle'),
    dict(
        keys=[
            'points',
            'img',
            'gt_bboxes_3d',
            'gt_labels_3d',
            'gt_bboxes',
            'gt_labels',
        ],
        meta_keys=[
            'cam2img',
            'ori_cam2img',
            'lidar2cam',
            'lidar2img',
            'cam2lidar',
            'ori_lidar2img',
            'img_aug_matrix',
            'box_type_3d',
            'sample_idx',
            'lidar_path',
            'img_path',
            'transformation_3d_flow',
            'pcd_rotation',
            'pcd_scale_factor',
            'pcd_trans',
            'img_aug_matrix',
            'lidar_aug_matrix',
            'num_pts_feats',
        ],
        type='Pack3DDetInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=1,
    dataset=dict(
        ann_file='nuscenes_infos_val.pkl',
        backend_args=None,
        box_type_3d='LiDAR',
        data_prefix=dict(
            CAM_BACK='samples/CAM_BACK',
            CAM_BACK_LEFT='samples/CAM_BACK_LEFT',
            CAM_BACK_RIGHT='samples/CAM_BACK_RIGHT',
            CAM_FRONT='samples/CAM_FRONT',
            CAM_FRONT_LEFT='samples/CAM_FRONT_LEFT',
            CAM_FRONT_RIGHT='samples/CAM_FRONT_RIGHT',
            pts='samples/LIDAR_TOP',
            sweeps='sweeps/LIDAR_TOP'),
        data_root='/media/xavier02/Sparkles1/nuscenes/',
        metainfo=dict(classes=[
            'car',
            'truck',
            'construction_vehicle',
            'bus',
            'trailer',
            'barrier',
            'motorcycle',
            'bicycle',
            'pedestrian',
            'traffic_cone',
        ]),
        modality=dict(use_camera=True, use_lidar=True),
        pipeline=[
            dict(
                backend_args=None,
                color_type='color',
                to_float32=True,
                type='BEVLoadMultiViewImageFromFiles'),
            dict(
                backend_args=None,
                coord_type='LIDAR',
                load_dim=5,
                type='LoadPointsFromFile',
                use_dim=5),
            dict(
                backend_args=None,
                load_dim=5,
                pad_empty_sweeps=True,
                remove_close=True,
                sweeps_num=4,
                type='LoadPointsFromMultiSweeps',
                use_dim=5),
            dict(
                bot_pct_lim=[
                    0.0,
                    0.0,
                ],
                final_dim=[
                    256,
                    704,
                ],
                is_train=False,
                rand_flip=False,
                resize_lim=[
                    0.48,
                    0.48,
                ],
                rot_lim=[
                    0.0,
                    0.0,
                ],
                type='ImageAug3D'),
            dict(
                point_cloud_range=[
                    -54.0,
                    -54.0,
                    -5.0,
                    54.0,
                    54.0,
                    3.0,
                ],
                type='PointsRangeFilter'),
            dict(
                keys=[
                    'img',
                    'points',
                    'gt_bboxes_3d',
                    'gt_labels_3d',
                ],
                meta_keys=[
                    'cam2img',
                    'ori_cam2img',
                    'lidar2cam',
                    'lidar2img',
                    'cam2lidar',
                    'ori_lidar2img',
                    'img_aug_matrix',
                    'box_type_3d',
                    'sample_idx',
                    'lidar_path',
                    'img_path',
                    'num_pts_feats',
                ],
                type='Pack3DDetInputs'),
        ],
        test_mode=True,
        type='NuScenesDataset'),
    drop_last=False,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='/media/xavier02/Sparkles1/nuscenes/nuscenes_infos_val.pkl',
    backend_args=None,
    data_root='/media/xavier02/Sparkles1/nuscenes/',
    metric='bbox',
    type='NuScenesMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='Det3DLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
voxel_size = [
    0.075,
    0.075,
    0.2,
]
work_dir = './work_dirs/bevfusion_lidar-cam_voxel0075_4s_resnet18'

2024/12/05 22:51:30 - mmengine - INFO - load model from: /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth
2024/12/05 22:51:30 - mmengine - INFO - Loads checkpoint by local backend from path: /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth
2024/12/05 22:51:30 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

bn1.weight - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

bn1.bias - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.0.downsample.1.weight - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.0.downsample.1.bias - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 

layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/resnet18.pth 
2024/12/05 22:51:33 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/12/05 22:51:33 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) Det3DVisualizationHook             
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/12/05 22:52:16 - mmengine - INFO - ------------------------------
2024/12/05 22:52:16 - mmengine - INFO - The length of test dataset: 6019
2024/12/05 22:52:16 - mmengine - INFO - The number of instances per category in the dataset:
+----------------------+--------+
| category             | number |
+----------------------+--------+
| car                  | 80004  |
| truck                | 15704  |
| construction_vehicle | 2678   |
| bus                  | 3158   |
| trailer              | 4159   |
| barrier              | 26992  |
| motorcycle           | 2508   |
| bicycle              | 2381   |
| pedestrian           | 34347  |
| traffic_cone         | 15597  |
+----------------------+--------+
2024/12/05 22:52:21 - mmengine - INFO - Load checkpoint from /media/xavier02/xavier_ssd_500/mmdetection3d_source/mmdetection3d-main/projects/BEVFusion/configs/Cam_lid_ep6_fp16.pth
2024/12/05 22:53:19 - mmengine - INFO - Epoch(test) [  50/6019]    eta: 1:56:34  time: 1.1718  data_time: 0.0588  memory: 2164  
2024/12/05 22:54:07 - mmengine - INFO - Epoch(test) [ 100/6019]    eta: 1:44:32  time: 0.9476  data_time: 0.0183  memory: 2164  
2024/12/05 22:54:52 - mmengine - INFO - Epoch(test) [ 150/6019]    eta: 1:38:25  time: 0.8992  data_time: 0.0164  memory: 2163  
2024/12/05 22:55:37 - mmengine - INFO - Epoch(test) [ 200/6019]    eta: 1:34:52  time: 0.8942  data_time: 0.0161  memory: 2164  
2024/12/05 22:56:20 - mmengine - INFO - Epoch(test) [ 250/6019]    eta: 1:32:06  time: 0.8768  data_time: 0.0166  memory: 2164  
2024/12/05 22:57:03 - mmengine - INFO - Epoch(test) [ 300/6019]    eta: 1:29:45  time: 0.8606  data_time: 0.0174  memory: 2164  
2024/12/05 22:57:47 - mmengine - INFO - Epoch(test) [ 350/6019]    eta: 1:28:08  time: 0.8797  data_time: 0.0166  memory: 2164  
2024/12/05 22:58:32 - mmengine - INFO - Epoch(test) [ 400/6019]    eta: 1:26:52  time: 0.8918  data_time: 0.0164  memory: 2165  
2024/12/05 22:59:16 - mmengine - INFO - Epoch(test) [ 450/6019]    eta: 1:25:39  time: 0.8847  data_time: 0.0161  memory: 2165  
2024/12/05 22:59:59 - mmengine - INFO - Epoch(test) [ 500/6019]    eta: 1:24:20  time: 0.8622  data_time: 0.0162  memory: 2164  
2024/12/05 23:00:43 - mmengine - INFO - Epoch(test) [ 550/6019]    eta: 1:23:08  time: 0.8645  data_time: 0.0166  memory: 2164  
2024/12/05 23:01:25 - mmengine - INFO - Epoch(test) [ 600/6019]    eta: 1:21:54  time: 0.8490  data_time: 0.0173  memory: 2162  
2024/12/05 23:02:05 - mmengine - INFO - Epoch(test) [ 650/6019]    eta: 1:20:22  time: 0.7954  data_time: 0.0163  memory: 2161  
2024/12/05 23:02:45 - mmengine - INFO - Epoch(test) [ 700/6019]    eta: 1:19:00  time: 0.8010  data_time: 0.0168  memory: 2161  
2024/12/05 23:03:25 - mmengine - INFO - Epoch(test) [ 750/6019]    eta: 1:17:44  time: 0.8010  data_time: 0.0166  memory: 2161  
2024/12/05 23:04:07 - mmengine - INFO - Epoch(test) [ 800/6019]    eta: 1:16:43  time: 0.8347  data_time: 0.0167  memory: 2164  
2024/12/05 23:04:47 - mmengine - INFO - Epoch(test) [ 850/6019]    eta: 1:15:37  time: 0.8086  data_time: 0.0163  memory: 2163  
2024/12/05 23:05:28 - mmengine - INFO - Epoch(test) [ 900/6019]    eta: 1:14:34  time: 0.8107  data_time: 0.0163  memory: 2163  
2024/12/05 23:06:10 - mmengine - INFO - Epoch(test) [ 950/6019]    eta: 1:13:40  time: 0.8362  data_time: 0.0168  memory: 2164  
2024/12/05 23:06:52 - mmengine - INFO - Epoch(test) [1000/6019]    eta: 1:12:50  time: 0.8455  data_time: 0.0173  memory: 2164  
2024/12/05 23:07:32 - mmengine - INFO - Epoch(test) [1050/6019]    eta: 1:11:49  time: 0.7981  data_time: 0.0173  memory: 2161  
2024/12/05 23:08:13 - mmengine - INFO - Epoch(test) [1100/6019]    eta: 1:10:57  time: 0.8288  data_time: 0.0170  memory: 2164  
2024/12/05 23:08:54 - mmengine - INFO - Epoch(test) [1150/6019]    eta: 1:10:05  time: 0.8260  data_time: 0.0169  memory: 2161  
2024/12/05 23:09:36 - mmengine - INFO - Epoch(test) [1200/6019]    eta: 1:09:17  time: 0.8384  data_time: 0.0169  memory: 2164  
2024/12/05 23:10:20 - mmengine - INFO - Epoch(test) [1250/6019]    eta: 1:08:37  time: 0.8774  data_time: 0.0163  memory: 2164  
2024/12/05 23:11:03 - mmengine - INFO - Epoch(test) [1300/6019]    eta: 1:07:50  time: 0.8442  data_time: 0.0161  memory: 2164  
2024/12/05 23:11:46 - mmengine - INFO - Epoch(test) [1350/6019]    eta: 1:07:08  time: 0.8686  data_time: 0.0168  memory: 2164  
2024/12/05 23:12:29 - mmengine - INFO - Epoch(test) [1400/6019]    eta: 1:06:24  time: 0.8570  data_time: 0.0164  memory: 2164  
2024/12/05 23:13:12 - mmengine - INFO - Epoch(test) [1450/6019]    eta: 1:05:41  time: 0.8649  data_time: 0.0163  memory: 2164  
2024/12/05 23:13:57 - mmengine - INFO - Epoch(test) [1500/6019]    eta: 1:05:03  time: 0.8941  data_time: 0.0173  memory: 2164  
2024/12/05 23:14:40 - mmengine - INFO - Epoch(test) [1550/6019]    eta: 1:04:21  time: 0.8732  data_time: 0.0193  memory: 2164  
2024/12/05 23:15:22 - mmengine - INFO - Epoch(test) [1600/6019]    eta: 1:03:32  time: 0.8222  data_time: 0.0169  memory: 2163  
2024/12/05 23:16:05 - mmengine - INFO - Epoch(test) [1650/6019]    eta: 1:02:48  time: 0.8588  data_time: 0.0170  memory: 2164  
2024/12/05 23:16:47 - mmengine - INFO - Epoch(test) [1700/6019]    eta: 1:02:03  time: 0.8471  data_time: 0.0164  memory: 2162  
2024/12/05 23:17:29 - mmengine - INFO - Epoch(test) [1750/6019]    eta: 1:01:18  time: 0.8442  data_time: 0.0164  memory: 2163  
2024/12/05 23:18:10 - mmengine - INFO - Epoch(test) [1800/6019]    eta: 1:00:31  time: 0.8251  data_time: 0.0160  memory: 2164  
2024/12/05 23:18:52 - mmengine - INFO - Epoch(test) [1850/6019]    eta: 0:59:45  time: 0.8412  data_time: 0.0171  memory: 2162  
2024/12/05 23:19:33 - mmengine - INFO - Epoch(test) [1900/6019]    eta: 0:58:57  time: 0.8110  data_time: 0.0169  memory: 2164  
2024/12/05 23:20:15 - mmengine - INFO - Epoch(test) [1950/6019]    eta: 0:58:12  time: 0.8409  data_time: 0.0177  memory: 2164  
2024/12/05 23:20:58 - mmengine - INFO - Epoch(test) [2000/6019]    eta: 0:57:28  time: 0.8504  data_time: 0.0167  memory: 2161  
2024/12/05 23:21:40 - mmengine - INFO - Epoch(test) [2050/6019]    eta: 0:56:45  time: 0.8496  data_time: 0.0165  memory: 2164  
2024/12/05 23:22:23 - mmengine - INFO - Epoch(test) [2100/6019]    eta: 0:56:02  time: 0.8547  data_time: 0.0177  memory: 2163  
2024/12/05 23:23:04 - mmengine - INFO - Epoch(test) [2150/6019]    eta: 0:55:16  time: 0.8323  data_time: 0.0167  memory: 2164  
2024/12/05 23:23:47 - mmengine - INFO - Epoch(test) [2200/6019]    eta: 0:54:33  time: 0.8487  data_time: 0.0171  memory: 2164  
2024/12/05 23:24:29 - mmengine - INFO - Epoch(test) [2250/6019]    eta: 0:53:49  time: 0.8513  data_time: 0.0162  memory: 2164  
2024/12/05 23:25:10 - mmengine - INFO - Epoch(test) [2300/6019]    eta: 0:53:02  time: 0.8059  data_time: 0.0163  memory: 2164  
2024/12/05 23:25:48 - mmengine - INFO - Epoch(test) [2350/6019]    eta: 0:52:13  time: 0.7723  data_time: 0.0159  memory: 2160  
2024/12/05 23:26:29 - mmengine - INFO - Epoch(test) [2400/6019]    eta: 0:51:28  time: 0.8159  data_time: 0.0165  memory: 2162  
2024/12/05 23:27:11 - mmengine - INFO - Epoch(test) [2450/6019]    eta: 0:50:43  time: 0.8278  data_time: 0.0162  memory: 2164  
2024/12/05 23:27:52 - mmengine - INFO - Epoch(test) [2500/6019]    eta: 0:49:58  time: 0.8247  data_time: 0.0162  memory: 2163  
2024/12/05 23:28:32 - mmengine - INFO - Epoch(test) [2550/6019]    eta: 0:49:13  time: 0.8112  data_time: 0.0167  memory: 2163  
2024/12/05 23:29:12 - mmengine - INFO - Epoch(test) [2600/6019]    eta: 0:48:26  time: 0.7866  data_time: 0.0163  memory: 2163  
2024/12/05 23:29:53 - mmengine - INFO - Epoch(test) [2650/6019]    eta: 0:47:42  time: 0.8291  data_time: 0.0168  memory: 2164  
2024/12/05 23:30:35 - mmengine - INFO - Epoch(test) [2700/6019]    eta: 0:46:58  time: 0.8265  data_time: 0.0164  memory: 2164  
2024/12/05 23:31:15 - mmengine - INFO - Epoch(test) [2750/6019]    eta: 0:46:13  time: 0.8051  data_time: 0.0165  memory: 2163  
2024/12/05 23:31:56 - mmengine - INFO - Epoch(test) [2800/6019]    eta: 0:45:29  time: 0.8209  data_time: 0.0167  memory: 2164  
2024/12/05 23:32:35 - mmengine - INFO - Epoch(test) [2850/6019]    eta: 0:44:43  time: 0.7823  data_time: 0.0161  memory: 2161  
2024/12/05 23:33:14 - mmengine - INFO - Epoch(test) [2900/6019]    eta: 0:43:57  time: 0.7830  data_time: 0.0173  memory: 2161  
2024/12/05 23:33:53 - mmengine - INFO - Epoch(test) [2950/6019]    eta: 0:43:12  time: 0.7796  data_time: 0.0168  memory: 2164  
2024/12/05 23:34:34 - mmengine - INFO - Epoch(test) [3000/6019]    eta: 0:42:28  time: 0.8119  data_time: 0.0163  memory: 2164  
2024/12/05 23:35:15 - mmengine - INFO - Epoch(test) [3050/6019]    eta: 0:41:44  time: 0.8192  data_time: 0.0168  memory: 2164  
2024/12/05 23:35:53 - mmengine - INFO - Epoch(test) [3100/6019]    eta: 0:40:58  time: 0.7634  data_time: 0.0175  memory: 2161  
2024/12/05 23:36:30 - mmengine - INFO - Epoch(test) [3150/6019]    eta: 0:40:12  time: 0.7428  data_time: 0.0163  memory: 2157  
2024/12/05 23:37:09 - mmengine - INFO - Epoch(test) [3200/6019]    eta: 0:39:27  time: 0.7811  data_time: 0.0160  memory: 2160  
2024/12/05 23:37:49 - mmengine - INFO - Epoch(test) [3250/6019]    eta: 0:38:43  time: 0.7888  data_time: 0.0163  memory: 2160  
2024/12/05 23:38:30 - mmengine - INFO - Epoch(test) [3300/6019]    eta: 0:38:01  time: 0.8365  data_time: 0.0163  memory: 2164  
2024/12/05 23:39:11 - mmengine - INFO - Epoch(test) [3350/6019]    eta: 0:37:18  time: 0.8053  data_time: 0.0170  memory: 2163  
2024/12/05 23:39:51 - mmengine - INFO - Epoch(test) [3400/6019]    eta: 0:36:35  time: 0.8082  data_time: 0.0162  memory: 2163  
2024/12/05 23:40:31 - mmengine - INFO - Epoch(test) [3450/6019]    eta: 0:35:51  time: 0.8056  data_time: 0.0162  memory: 2163  
2024/12/05 23:41:11 - mmengine - INFO - Epoch(test) [3500/6019]    eta: 0:35:08  time: 0.8020  data_time: 0.0168  memory: 2163  
2024/12/05 23:41:51 - mmengine - INFO - Epoch(test) [3550/6019]    eta: 0:34:25  time: 0.7912  data_time: 0.0166  memory: 2161  
2024/12/05 23:42:31 - mmengine - INFO - Epoch(test) [3600/6019]    eta: 0:33:42  time: 0.7997  data_time: 0.0163  memory: 2161  
2024/12/05 23:43:12 - mmengine - INFO - Epoch(test) [3650/6019]    eta: 0:33:00  time: 0.8244  data_time: 0.0165  memory: 2161  
2024/12/05 23:43:52 - mmengine - INFO - Epoch(test) [3700/6019]    eta: 0:32:16  time: 0.7907  data_time: 0.0162  memory: 2160  
2024/12/05 23:44:34 - mmengine - INFO - Epoch(test) [3750/6019]    eta: 0:31:35  time: 0.8457  data_time: 0.0176  memory: 2164  
2024/12/05 23:45:19 - mmengine - INFO - Epoch(test) [3800/6019]    eta: 0:30:55  time: 0.8884  data_time: 0.0166  memory: 2165  
2024/12/05 23:46:01 - mmengine - INFO - Epoch(test) [3850/6019]    eta: 0:30:13  time: 0.8492  data_time: 0.0165  memory: 2164  
2024/12/05 23:46:46 - mmengine - INFO - Epoch(test) [3900/6019]    eta: 0:29:33  time: 0.8959  data_time: 0.0172  memory: 2164  
2024/12/05 23:47:30 - mmengine - INFO - Epoch(test) [3950/6019]    eta: 0:28:53  time: 0.8917  data_time: 0.0168  memory: 2164  
2024/12/05 23:48:15 - mmengine - INFO - Epoch(test) [4000/6019]    eta: 0:28:12  time: 0.8923  data_time: 0.0167  memory: 2165  
2024/12/05 23:48:55 - mmengine - INFO - Epoch(test) [4050/6019]    eta: 0:27:29  time: 0.7898  data_time: 0.0165  memory: 2162  
2024/12/05 23:49:35 - mmengine - INFO - Epoch(test) [4100/6019]    eta: 0:26:47  time: 0.8164  data_time: 0.0164  memory: 2161  
2024/12/05 23:50:17 - mmengine - INFO - Epoch(test) [4150/6019]    eta: 0:26:05  time: 0.8313  data_time: 0.0171  memory: 2164  
2024/12/05 23:51:00 - mmengine - INFO - Epoch(test) [4200/6019]    eta: 0:25:23  time: 0.8521  data_time: 0.0170  memory: 2164  
2024/12/05 23:51:39 - mmengine - INFO - Epoch(test) [4250/6019]    eta: 0:24:40  time: 0.7886  data_time: 0.0161  memory: 2162  
2024/12/05 23:52:18 - mmengine - INFO - Epoch(test) [4300/6019]    eta: 0:23:57  time: 0.7758  data_time: 0.0161  memory: 2161  
2024/12/05 23:52:57 - mmengine - INFO - Epoch(test) [4350/6019]    eta: 0:23:14  time: 0.7863  data_time: 0.0169  memory: 2161  
2024/12/05 23:53:37 - mmengine - INFO - Epoch(test) [4400/6019]    eta: 0:22:32  time: 0.8060  data_time: 0.0172  memory: 2161  
2024/12/05 23:54:18 - mmengine - INFO - Epoch(test) [4450/6019]    eta: 0:21:50  time: 0.8138  data_time: 0.0165  memory: 2161  
2024/12/05 23:55:00 - mmengine - INFO - Epoch(test) [4500/6019]    eta: 0:21:08  time: 0.8341  data_time: 0.0170  memory: 2164  
2024/12/05 23:55:43 - mmengine - INFO - Epoch(test) [4550/6019]    eta: 0:20:27  time: 0.8545  data_time: 0.0171  memory: 2164  
2024/12/05 23:56:26 - mmengine - INFO - Epoch(test) [4600/6019]    eta: 0:19:45  time: 0.8754  data_time: 0.0167  memory: 2164  
2024/12/05 23:57:11 - mmengine - INFO - Epoch(test) [4650/6019]    eta: 0:19:04  time: 0.8836  data_time: 0.0167  memory: 2164  
2024/12/05 23:57:54 - mmengine - INFO - Epoch(test) [4700/6019]    eta: 0:18:23  time: 0.8673  data_time: 0.0168  memory: 2164  
2024/12/05 23:58:37 - mmengine - INFO - Epoch(test) [4750/6019]    eta: 0:17:42  time: 0.8636  data_time: 0.0175  memory: 2164  
2024/12/05 23:59:21 - mmengine - INFO - Epoch(test) [4800/6019]    eta: 0:17:00  time: 0.8706  data_time: 0.0169  memory: 2164  
2024/12/06 00:00:04 - mmengine - INFO - Epoch(test) [4850/6019]    eta: 0:16:19  time: 0.8577  data_time: 0.0174  memory: 2164  
2024/12/06 00:00:46 - mmengine - INFO - Epoch(test) [4900/6019]    eta: 0:15:37  time: 0.8484  data_time: 0.0165  memory: 2164  
2024/12/06 00:01:28 - mmengine - INFO - Epoch(test) [4950/6019]    eta: 0:14:55  time: 0.8426  data_time: 0.0166  memory: 2164  
2024/12/06 00:02:11 - mmengine - INFO - Epoch(test) [5000/6019]    eta: 0:14:13  time: 0.8625  data_time: 0.0165  memory: 2164  
2024/12/06 00:02:53 - mmengine - INFO - Epoch(test) [5050/6019]    eta: 0:13:31  time: 0.8432  data_time: 0.0164  memory: 2164  
2024/12/06 00:03:36 - mmengine - INFO - Epoch(test) [5100/6019]    eta: 0:12:50  time: 0.8435  data_time: 0.0165  memory: 2164  
2024/12/06 00:04:18 - mmengine - INFO - Epoch(test) [5150/6019]    eta: 0:12:08  time: 0.8556  data_time: 0.0172  memory: 2161  
2024/12/06 00:05:00 - mmengine - INFO - Epoch(test) [5200/6019]    eta: 0:11:26  time: 0.8227  data_time: 0.0168  memory: 2164  
2024/12/06 00:05:42 - mmengine - INFO - Epoch(test) [5250/6019]    eta: 0:10:44  time: 0.8449  data_time: 0.0164  memory: 2164  
2024/12/06 00:06:23 - mmengine - INFO - Epoch(test) [5300/6019]    eta: 0:10:02  time: 0.8254  data_time: 0.0166  memory: 2161  
2024/12/06 00:07:05 - mmengine - INFO - Epoch(test) [5350/6019]    eta: 0:09:20  time: 0.8372  data_time: 0.0177  memory: 2164  
2024/12/06 00:07:48 - mmengine - INFO - Epoch(test) [5400/6019]    eta: 0:08:38  time: 0.8605  data_time: 0.0165  memory: 2164  
2024/12/06 00:08:31 - mmengine - INFO - Epoch(test) [5450/6019]    eta: 0:07:57  time: 0.8547  data_time: 0.0163  memory: 2164  
2024/12/06 00:09:14 - mmengine - INFO - Epoch(test) [5500/6019]    eta: 0:07:15  time: 0.8716  data_time: 0.0165  memory: 2165  
2024/12/06 00:09:58 - mmengine - INFO - Epoch(test) [5550/6019]    eta: 0:06:33  time: 0.8685  data_time: 0.0165  memory: 2164  
2024/12/06 00:10:41 - mmengine - INFO - Epoch(test) [5600/6019]    eta: 0:05:51  time: 0.8745  data_time: 0.0169  memory: 2164  
2024/12/06 00:11:25 - mmengine - INFO - Epoch(test) [5650/6019]    eta: 0:05:09  time: 0.8678  data_time: 0.0168  memory: 2164  
2024/12/06 00:12:09 - mmengine - INFO - Epoch(test) [5700/6019]    eta: 0:04:27  time: 0.8913  data_time: 0.0166  memory: 2165  
2024/12/06 00:12:53 - mmengine - INFO - Epoch(test) [5750/6019]    eta: 0:03:46  time: 0.8793  data_time: 0.0168  memory: 2165  
2024/12/06 00:13:36 - mmengine - INFO - Epoch(test) [5800/6019]    eta: 0:03:04  time: 0.8531  data_time: 0.0163  memory: 2164  
2024/12/06 00:14:19 - mmengine - INFO - Epoch(test) [5850/6019]    eta: 0:02:22  time: 0.8661  data_time: 0.0175  memory: 2165  
2024/12/06 00:15:04 - mmengine - INFO - Epoch(test) [5900/6019]    eta: 0:01:40  time: 0.8909  data_time: 0.0168  memory: 2165  
2024/12/06 00:15:48 - mmengine - INFO - Epoch(test) [5950/6019]    eta: 0:00:58  time: 0.8826  data_time: 0.0169  memory: 2164  
2024/12/06 00:16:30 - mmengine - INFO - Epoch(test) [6000/6019]    eta: 0:00:15  time: 0.8411  data_time: 0.0163  memory: 2164  
2024/12/06 00:41:54 - mmengine - INFO - Epoch(test) [6019/6019]    NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_0.5: 0.7703  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_1.0: 0.8635  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_2.0: 0.8979  NuScenes metric/pred_instances_3d_NuScenes/car_AP_dist_4.0: 0.9109  NuScenes metric/pred_instances_3d_NuScenes/car_trans_err: 0.1737  NuScenes metric/pred_instances_3d_NuScenes/car_scale_err: 0.1525  NuScenes metric/pred_instances_3d_NuScenes/car_orient_err: 0.0911  NuScenes metric/pred_instances_3d_NuScenes/car_vel_err: 0.3510  NuScenes metric/pred_instances_3d_NuScenes/car_attr_err: 0.1939  NuScenes metric/pred_instances_3d_NuScenes/mATE: 0.2822  NuScenes metric/pred_instances_3d_NuScenes/mASE: 0.2566  NuScenes metric/pred_instances_3d_NuScenes/mAOE: 0.3243  NuScenes metric/pred_instances_3d_NuScenes/mAVE: 0.3318  NuScenes metric/pred_instances_3d_NuScenes/mAAE: 0.1865  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_0.5: 0.4135  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_1.0: 0.5872  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_2.0: 0.6761  NuScenes metric/pred_instances_3d_NuScenes/truck_AP_dist_4.0: 0.7173  NuScenes metric/pred_instances_3d_NuScenes/truck_trans_err: 0.3279  NuScenes metric/pred_instances_3d_NuScenes/truck_scale_err: 0.1808  NuScenes metric/pred_instances_3d_NuScenes/truck_orient_err: 0.0972  NuScenes metric/pred_instances_3d_NuScenes/truck_vel_err: 0.3068  NuScenes metric/pred_instances_3d_NuScenes/truck_attr_err: 0.2250  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_0.5: 0.0404  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_1.0: 0.1783  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_2.0: 0.3271  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_AP_dist_4.0: 0.4279  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_trans_err: 0.6760  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_scale_err: 0.4505  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_orient_err: 0.8950  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_vel_err: 0.1196  NuScenes metric/pred_instances_3d_NuScenes/construction_vehicle_attr_err: 0.2994  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_0.5: 0.5005  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_1.0: 0.7541  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_2.0: 0.8609  NuScenes metric/pred_instances_3d_NuScenes/bus_AP_dist_4.0: 0.8750  NuScenes metric/pred_instances_3d_NuScenes/bus_trans_err: 0.3170  NuScenes metric/pred_instances_3d_NuScenes/bus_scale_err: 0.1797  NuScenes metric/pred_instances_3d_NuScenes/bus_orient_err: 0.0498  NuScenes metric/pred_instances_3d_NuScenes/bus_vel_err: 0.5459  NuScenes metric/pred_instances_3d_NuScenes/bus_attr_err: 0.2389  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_0.5: 0.1124  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_1.0: 0.3678  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_2.0: 0.5321  NuScenes metric/pred_instances_3d_NuScenes/trailer_AP_dist_4.0: 0.6407  NuScenes metric/pred_instances_3d_NuScenes/trailer_trans_err: 0.5348  NuScenes metric/pred_instances_3d_NuScenes/trailer_scale_err: 0.2121  NuScenes metric/pred_instances_3d_NuScenes/trailer_orient_err: 0.6520  NuScenes metric/pred_instances_3d_NuScenes/trailer_vel_err: 0.2314  NuScenes metric/pred_instances_3d_NuScenes/trailer_attr_err: 0.1782  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_0.5: 0.6010  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_1.0: 0.6952  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_2.0: 0.7328  NuScenes metric/pred_instances_3d_NuScenes/barrier_AP_dist_4.0: 0.7453  NuScenes metric/pred_instances_3d_NuScenes/barrier_trans_err: 0.1886  NuScenes metric/pred_instances_3d_NuScenes/barrier_scale_err: 0.2758  NuScenes metric/pred_instances_3d_NuScenes/barrier_orient_err: 0.0660  NuScenes metric/pred_instances_3d_NuScenes/barrier_vel_err: nan  NuScenes metric/pred_instances_3d_NuScenes/barrier_attr_err: nan  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_0.5: 0.5528  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_1.0: 0.6630  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_2.0: 0.6783  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_AP_dist_4.0: 0.6896  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_trans_err: 0.1914  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_scale_err: 0.2359  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_orient_err: 0.2600  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_vel_err: 0.6185  NuScenes metric/pred_instances_3d_NuScenes/motorcycle_attr_err: 0.2451  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_0.5: 0.4721  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_1.0: 0.4923  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_2.0: 0.4939  NuScenes metric/pred_instances_3d_NuScenes/bicycle_AP_dist_4.0: 0.4981  NuScenes metric/pred_instances_3d_NuScenes/bicycle_trans_err: 0.1553  NuScenes metric/pred_instances_3d_NuScenes/bicycle_scale_err: 0.2662  NuScenes metric/pred_instances_3d_NuScenes/bicycle_orient_err: 0.4206  NuScenes metric/pred_instances_3d_NuScenes/bicycle_vel_err: 0.2425  NuScenes metric/pred_instances_3d_NuScenes/bicycle_attr_err: 0.0083  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_0.5: 0.8358  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_1.0: 0.8484  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_2.0: 0.8590  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_AP_dist_4.0: 0.8702  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_trans_err: 0.1308  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_scale_err: 0.2856  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_orient_err: 0.3866  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_vel_err: 0.2386  NuScenes metric/pred_instances_3d_NuScenes/pedestrian_attr_err: 0.1029  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_0.5: 0.6941  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_1.0: 0.7056  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_2.0: 0.7235  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_AP_dist_4.0: 0.7507  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_trans_err: 0.1262  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_scale_err: 0.3270  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_orient_err: nan  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_vel_err: nan  NuScenes metric/pred_instances_3d_NuScenes/traffic_cone_attr_err: nan  NuScenes metric/pred_instances_3d_NuScenes/NDS: 0.6751  NuScenes metric/pred_instances_3d_NuScenes/mAP: 0.6264  data_time: 0.0171  time: 0.8413
